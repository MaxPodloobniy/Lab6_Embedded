
JoyStick_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041a0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08004340  08004340  00014340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043a0  080043a0  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080043a0  080043a0  000143a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043a8  080043a8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043a8  080043a8  000143a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043ac  080043ac  000143ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080043b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  20000068  08004418  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d8  08004418  000202d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009209  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b28  00000000  00000000  000292e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000930  00000000  00000000  0002ae10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000704  00000000  00000000  0002b740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017730  00000000  00000000  0002be44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bcec  00000000  00000000  00043574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009367c  00000000  00000000  0004f260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002ccc  00000000  00000000  000e28dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000e55a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004328 	.word	0x08004328

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004328 	.word	0x08004328

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000580:	4b0e      	ldr	r3, [pc, #56]	; (80005bc <HAL_Init+0x40>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a0d      	ldr	r2, [pc, #52]	; (80005bc <HAL_Init+0x40>)
 8000586:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800058a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800058c:	4b0b      	ldr	r3, [pc, #44]	; (80005bc <HAL_Init+0x40>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a0a      	ldr	r2, [pc, #40]	; (80005bc <HAL_Init+0x40>)
 8000592:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000596:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000598:	4b08      	ldr	r3, [pc, #32]	; (80005bc <HAL_Init+0x40>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a07      	ldr	r2, [pc, #28]	; (80005bc <HAL_Init+0x40>)
 800059e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a4:	2003      	movs	r0, #3
 80005a6:	f000 fd51 	bl	800104c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005aa:	2000      	movs	r0, #0
 80005ac:	f000 f808 	bl	80005c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005b0:	f002 fda6 	bl	8003100 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005b4:	2300      	movs	r3, #0
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40023c00 	.word	0x40023c00

080005c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005c8:	4b12      	ldr	r3, [pc, #72]	; (8000614 <HAL_InitTick+0x54>)
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	4b12      	ldr	r3, [pc, #72]	; (8000618 <HAL_InitTick+0x58>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	4619      	mov	r1, r3
 80005d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80005da:	fbb2 f3f3 	udiv	r3, r2, r3
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 fd69 	bl	80010b6 <HAL_SYSTICK_Config>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ea:	2301      	movs	r3, #1
 80005ec:	e00e      	b.n	800060c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2b0f      	cmp	r3, #15
 80005f2:	d80a      	bhi.n	800060a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005f4:	2200      	movs	r2, #0
 80005f6:	6879      	ldr	r1, [r7, #4]
 80005f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005fc:	f000 fd31 	bl	8001062 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000600:	4a06      	ldr	r2, [pc, #24]	; (800061c <HAL_InitTick+0x5c>)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000606:	2300      	movs	r3, #0
 8000608:	e000      	b.n	800060c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800060a:	2301      	movs	r3, #1
}
 800060c:	4618      	mov	r0, r3
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20000008 	.word	0x20000008
 8000618:	20000004 	.word	0x20000004
 800061c:	20000000 	.word	0x20000000

08000620 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000624:	4b06      	ldr	r3, [pc, #24]	; (8000640 <HAL_IncTick+0x20>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	461a      	mov	r2, r3
 800062a:	4b06      	ldr	r3, [pc, #24]	; (8000644 <HAL_IncTick+0x24>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4413      	add	r3, r2
 8000630:	4a04      	ldr	r2, [pc, #16]	; (8000644 <HAL_IncTick+0x24>)
 8000632:	6013      	str	r3, [r2, #0]
}
 8000634:	bf00      	nop
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	20000004 	.word	0x20000004
 8000644:	20000084 	.word	0x20000084

08000648 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  return uwTick;
 800064c:	4b03      	ldr	r3, [pc, #12]	; (800065c <HAL_GetTick+0x14>)
 800064e:	681b      	ldr	r3, [r3, #0]
}
 8000650:	4618      	mov	r0, r3
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	20000084 	.word	0x20000084

08000660 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000668:	f7ff ffee 	bl	8000648 <HAL_GetTick>
 800066c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000678:	d005      	beq.n	8000686 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800067a:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <HAL_Delay+0x44>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	461a      	mov	r2, r3
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	4413      	add	r3, r2
 8000684:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000686:	bf00      	nop
 8000688:	f7ff ffde 	bl	8000648 <HAL_GetTick>
 800068c:	4602      	mov	r2, r0
 800068e:	68bb      	ldr	r3, [r7, #8]
 8000690:	1ad3      	subs	r3, r2, r3
 8000692:	68fa      	ldr	r2, [r7, #12]
 8000694:	429a      	cmp	r2, r3
 8000696:	d8f7      	bhi.n	8000688 <HAL_Delay+0x28>
  {
  }
}
 8000698:	bf00      	nop
 800069a:	bf00      	nop
 800069c:	3710      	adds	r7, #16
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000004 	.word	0x20000004

080006a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006b0:	2300      	movs	r3, #0
 80006b2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d101      	bne.n	80006be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80006ba:	2301      	movs	r3, #1
 80006bc:	e033      	b.n	8000726 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d109      	bne.n	80006da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f002 fd42 	bl	8003150 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2200      	movs	r2, #0
 80006d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	2200      	movs	r2, #0
 80006d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006de:	f003 0310 	and.w	r3, r3, #16
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d118      	bne.n	8000718 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80006ee:	f023 0302 	bic.w	r3, r3, #2
 80006f2:	f043 0202 	orr.w	r2, r3, #2
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f000 fa58 	bl	8000bb0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2200      	movs	r2, #0
 8000704:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070a:	f023 0303 	bic.w	r3, r3, #3
 800070e:	f043 0201 	orr.w	r2, r3, #1
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	641a      	str	r2, [r3, #64]	; 0x40
 8000716:	e001      	b.n	800071c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000718:	2301      	movs	r3, #1
 800071a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2200      	movs	r2, #0
 8000720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000724:	7bfb      	ldrb	r3, [r7, #15]
}
 8000726:	4618      	mov	r0, r3
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
	...

08000730 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af00      	add	r7, sp, #0
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	60b9      	str	r1, [r7, #8]
 800073a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800073c:	2300      	movs	r3, #0
 800073e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000746:	2b01      	cmp	r3, #1
 8000748:	d101      	bne.n	800074e <HAL_ADC_Start_DMA+0x1e>
 800074a:	2302      	movs	r3, #2
 800074c:	e0ce      	b.n	80008ec <HAL_ADC_Start_DMA+0x1bc>
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	2201      	movs	r2, #1
 8000752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	689b      	ldr	r3, [r3, #8]
 800075c:	f003 0301 	and.w	r3, r3, #1
 8000760:	2b01      	cmp	r3, #1
 8000762:	d018      	beq.n	8000796 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	689a      	ldr	r2, [r3, #8]
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f042 0201 	orr.w	r2, r2, #1
 8000772:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000774:	4b5f      	ldr	r3, [pc, #380]	; (80008f4 <HAL_ADC_Start_DMA+0x1c4>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a5f      	ldr	r2, [pc, #380]	; (80008f8 <HAL_ADC_Start_DMA+0x1c8>)
 800077a:	fba2 2303 	umull	r2, r3, r2, r3
 800077e:	0c9a      	lsrs	r2, r3, #18
 8000780:	4613      	mov	r3, r2
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	4413      	add	r3, r2
 8000786:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8000788:	e002      	b.n	8000790 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800078a:	693b      	ldr	r3, [r7, #16]
 800078c:	3b01      	subs	r3, #1
 800078e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8000790:	693b      	ldr	r3, [r7, #16]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d1f9      	bne.n	800078a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	689b      	ldr	r3, [r3, #8]
 800079c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80007a4:	d107      	bne.n	80007b6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	689a      	ldr	r2, [r3, #8]
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80007b4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	689b      	ldr	r3, [r3, #8]
 80007bc:	f003 0301 	and.w	r3, r3, #1
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	f040 8086 	bne.w	80008d2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ca:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80007ce:	f023 0301 	bic.w	r3, r3, #1
 80007d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d007      	beq.n	80007f8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007f0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000800:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000804:	d106      	bne.n	8000814 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080a:	f023 0206 	bic.w	r2, r3, #6
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	645a      	str	r2, [r3, #68]	; 0x44
 8000812:	e002      	b.n	800081a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	2200      	movs	r2, #0
 8000818:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	2200      	movs	r2, #0
 800081e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000822:	4b36      	ldr	r3, [pc, #216]	; (80008fc <HAL_ADC_Start_DMA+0x1cc>)
 8000824:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800082a:	4a35      	ldr	r2, [pc, #212]	; (8000900 <HAL_ADC_Start_DMA+0x1d0>)
 800082c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000832:	4a34      	ldr	r2, [pc, #208]	; (8000904 <HAL_ADC_Start_DMA+0x1d4>)
 8000834:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800083a:	4a33      	ldr	r2, [pc, #204]	; (8000908 <HAL_ADC_Start_DMA+0x1d8>)
 800083c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000846:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	685a      	ldr	r2, [r3, #4]
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000856:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	689a      	ldr	r2, [r3, #8]
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000866:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	334c      	adds	r3, #76	; 0x4c
 8000872:	4619      	mov	r1, r3
 8000874:	68ba      	ldr	r2, [r7, #8]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	f000 fcd8 	bl	800122c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	685b      	ldr	r3, [r3, #4]
 8000880:	f003 031f 	and.w	r3, r3, #31
 8000884:	2b00      	cmp	r3, #0
 8000886:	d10f      	bne.n	80008a8 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	689b      	ldr	r3, [r3, #8]
 800088e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000892:	2b00      	cmp	r3, #0
 8000894:	d129      	bne.n	80008ea <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	689a      	ldr	r2, [r3, #8]
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	e020      	b.n	80008ea <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a17      	ldr	r2, [pc, #92]	; (800090c <HAL_ADC_Start_DMA+0x1dc>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d11b      	bne.n	80008ea <HAL_ADC_Start_DMA+0x1ba>
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	689b      	ldr	r3, [r3, #8]
 80008b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d114      	bne.n	80008ea <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	689a      	ldr	r2, [r3, #8]
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	e00b      	b.n	80008ea <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d6:	f043 0210 	orr.w	r2, r3, #16
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e2:	f043 0201 	orr.w	r2, r3, #1
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80008ea:	2300      	movs	r3, #0
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3718      	adds	r7, #24
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000008 	.word	0x20000008
 80008f8:	431bde83 	.word	0x431bde83
 80008fc:	40012300 	.word	0x40012300
 8000900:	08000da9 	.word	0x08000da9
 8000904:	08000e63 	.word	0x08000e63
 8000908:	08000e7f 	.word	0x08000e7f
 800090c:	40012000 	.word	0x40012000

08000910 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8000918:	bf00      	nop
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800092c:	bf00      	nop
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8000940:	bf00      	nop
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000956:	2300      	movs	r3, #0
 8000958:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000960:	2b01      	cmp	r3, #1
 8000962:	d101      	bne.n	8000968 <HAL_ADC_ConfigChannel+0x1c>
 8000964:	2302      	movs	r3, #2
 8000966:	e113      	b.n	8000b90 <HAL_ADC_ConfigChannel+0x244>
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2201      	movs	r2, #1
 800096c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2b09      	cmp	r3, #9
 8000976:	d925      	bls.n	80009c4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	68d9      	ldr	r1, [r3, #12]
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	b29b      	uxth	r3, r3
 8000984:	461a      	mov	r2, r3
 8000986:	4613      	mov	r3, r2
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	4413      	add	r3, r2
 800098c:	3b1e      	subs	r3, #30
 800098e:	2207      	movs	r2, #7
 8000990:	fa02 f303 	lsl.w	r3, r2, r3
 8000994:	43da      	mvns	r2, r3
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	400a      	ands	r2, r1
 800099c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	68d9      	ldr	r1, [r3, #12]
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	689a      	ldr	r2, [r3, #8]
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	4618      	mov	r0, r3
 80009b0:	4603      	mov	r3, r0
 80009b2:	005b      	lsls	r3, r3, #1
 80009b4:	4403      	add	r3, r0
 80009b6:	3b1e      	subs	r3, #30
 80009b8:	409a      	lsls	r2, r3
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	430a      	orrs	r2, r1
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	e022      	b.n	8000a0a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	6919      	ldr	r1, [r3, #16]
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	b29b      	uxth	r3, r3
 80009d0:	461a      	mov	r2, r3
 80009d2:	4613      	mov	r3, r2
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	4413      	add	r3, r2
 80009d8:	2207      	movs	r2, #7
 80009da:	fa02 f303 	lsl.w	r3, r2, r3
 80009de:	43da      	mvns	r2, r3
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	400a      	ands	r2, r1
 80009e6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	6919      	ldr	r1, [r3, #16]
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	689a      	ldr	r2, [r3, #8]
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	4618      	mov	r0, r3
 80009fa:	4603      	mov	r3, r0
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	4403      	add	r3, r0
 8000a00:	409a      	lsls	r2, r3
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	430a      	orrs	r2, r1
 8000a08:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	2b06      	cmp	r3, #6
 8000a10:	d824      	bhi.n	8000a5c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	685a      	ldr	r2, [r3, #4]
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	4413      	add	r3, r2
 8000a22:	3b05      	subs	r3, #5
 8000a24:	221f      	movs	r2, #31
 8000a26:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2a:	43da      	mvns	r2, r3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	400a      	ands	r2, r1
 8000a32:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	b29b      	uxth	r3, r3
 8000a40:	4618      	mov	r0, r3
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	685a      	ldr	r2, [r3, #4]
 8000a46:	4613      	mov	r3, r2
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	4413      	add	r3, r2
 8000a4c:	3b05      	subs	r3, #5
 8000a4e:	fa00 f203 	lsl.w	r2, r0, r3
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	430a      	orrs	r2, r1
 8000a58:	635a      	str	r2, [r3, #52]	; 0x34
 8000a5a:	e04c      	b.n	8000af6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	2b0c      	cmp	r3, #12
 8000a62:	d824      	bhi.n	8000aae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	685a      	ldr	r2, [r3, #4]
 8000a6e:	4613      	mov	r3, r2
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	4413      	add	r3, r2
 8000a74:	3b23      	subs	r3, #35	; 0x23
 8000a76:	221f      	movs	r2, #31
 8000a78:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7c:	43da      	mvns	r2, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	400a      	ands	r2, r1
 8000a84:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	4618      	mov	r0, r3
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	685a      	ldr	r2, [r3, #4]
 8000a98:	4613      	mov	r3, r2
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	4413      	add	r3, r2
 8000a9e:	3b23      	subs	r3, #35	; 0x23
 8000aa0:	fa00 f203 	lsl.w	r2, r0, r3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	430a      	orrs	r2, r1
 8000aaa:	631a      	str	r2, [r3, #48]	; 0x30
 8000aac:	e023      	b.n	8000af6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	685a      	ldr	r2, [r3, #4]
 8000ab8:	4613      	mov	r3, r2
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	4413      	add	r3, r2
 8000abe:	3b41      	subs	r3, #65	; 0x41
 8000ac0:	221f      	movs	r2, #31
 8000ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac6:	43da      	mvns	r2, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	400a      	ands	r2, r1
 8000ace:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	4618      	mov	r0, r3
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	685a      	ldr	r2, [r3, #4]
 8000ae2:	4613      	mov	r3, r2
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	4413      	add	r3, r2
 8000ae8:	3b41      	subs	r3, #65	; 0x41
 8000aea:	fa00 f203 	lsl.w	r2, r0, r3
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	430a      	orrs	r2, r1
 8000af4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000af6:	4b29      	ldr	r3, [pc, #164]	; (8000b9c <HAL_ADC_ConfigChannel+0x250>)
 8000af8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a28      	ldr	r2, [pc, #160]	; (8000ba0 <HAL_ADC_ConfigChannel+0x254>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d10f      	bne.n	8000b24 <HAL_ADC_ConfigChannel+0x1d8>
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2b12      	cmp	r3, #18
 8000b0a:	d10b      	bne.n	8000b24 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a1d      	ldr	r2, [pc, #116]	; (8000ba0 <HAL_ADC_ConfigChannel+0x254>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d12b      	bne.n	8000b86 <HAL_ADC_ConfigChannel+0x23a>
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a1c      	ldr	r2, [pc, #112]	; (8000ba4 <HAL_ADC_ConfigChannel+0x258>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d003      	beq.n	8000b40 <HAL_ADC_ConfigChannel+0x1f4>
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b11      	cmp	r3, #17
 8000b3e:	d122      	bne.n	8000b86 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a11      	ldr	r2, [pc, #68]	; (8000ba4 <HAL_ADC_ConfigChannel+0x258>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d111      	bne.n	8000b86 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000b62:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <HAL_ADC_ConfigChannel+0x25c>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a11      	ldr	r2, [pc, #68]	; (8000bac <HAL_ADC_ConfigChannel+0x260>)
 8000b68:	fba2 2303 	umull	r2, r3, r2, r3
 8000b6c:	0c9a      	lsrs	r2, r3, #18
 8000b6e:	4613      	mov	r3, r2
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	4413      	add	r3, r2
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8000b78:	e002      	b.n	8000b80 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	3b01      	subs	r3, #1
 8000b7e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d1f9      	bne.n	8000b7a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8000b8e:	2300      	movs	r3, #0
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3714      	adds	r7, #20
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	40012300 	.word	0x40012300
 8000ba0:	40012000 	.word	0x40012000
 8000ba4:	10000012 	.word	0x10000012
 8000ba8:	20000008 	.word	0x20000008
 8000bac:	431bde83 	.word	0x431bde83

08000bb0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000bb8:	4b79      	ldr	r3, [pc, #484]	; (8000da0 <ADC_Init+0x1f0>)
 8000bba:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	685a      	ldr	r2, [r3, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	431a      	orrs	r2, r3
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	685a      	ldr	r2, [r3, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000be4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	6859      	ldr	r1, [r3, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	691b      	ldr	r3, [r3, #16]
 8000bf0:	021a      	lsls	r2, r3, #8
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	430a      	orrs	r2, r1
 8000bf8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	685a      	ldr	r2, [r3, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000c08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	6859      	ldr	r1, [r3, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	689a      	ldr	r2, [r3, #8]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	430a      	orrs	r2, r1
 8000c1a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	689a      	ldr	r2, [r3, #8]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	6899      	ldr	r1, [r3, #8]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	68da      	ldr	r2, [r3, #12]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	430a      	orrs	r2, r1
 8000c3c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c42:	4a58      	ldr	r2, [pc, #352]	; (8000da4 <ADC_Init+0x1f4>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d022      	beq.n	8000c8e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	689a      	ldr	r2, [r3, #8]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000c56:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	6899      	ldr	r1, [r3, #8]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	430a      	orrs	r2, r1
 8000c68:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	689a      	ldr	r2, [r3, #8]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000c78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	6899      	ldr	r1, [r3, #8]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	430a      	orrs	r2, r1
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	e00f      	b.n	8000cae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	689a      	ldr	r2, [r3, #8]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000c9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	689a      	ldr	r2, [r3, #8]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000cac:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	689a      	ldr	r2, [r3, #8]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f022 0202 	bic.w	r2, r2, #2
 8000cbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	6899      	ldr	r1, [r3, #8]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	7e1b      	ldrb	r3, [r3, #24]
 8000cc8:	005a      	lsls	r2, r3, #1
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	430a      	orrs	r2, r1
 8000cd0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d01b      	beq.n	8000d14 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	685a      	ldr	r2, [r3, #4]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000cea:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	685a      	ldr	r2, [r3, #4]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000cfa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	6859      	ldr	r1, [r3, #4]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d06:	3b01      	subs	r3, #1
 8000d08:	035a      	lsls	r2, r3, #13
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	430a      	orrs	r2, r1
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	e007      	b.n	8000d24 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	685a      	ldr	r2, [r3, #4]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000d22:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000d32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	69db      	ldr	r3, [r3, #28]
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	051a      	lsls	r2, r3, #20
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	430a      	orrs	r2, r1
 8000d48:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	689a      	ldr	r2, [r3, #8]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000d58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	6899      	ldr	r1, [r3, #8]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000d66:	025a      	lsls	r2, r3, #9
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	430a      	orrs	r2, r1
 8000d6e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	689a      	ldr	r2, [r3, #8]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	6899      	ldr	r1, [r3, #8]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	695b      	ldr	r3, [r3, #20]
 8000d8a:	029a      	lsls	r2, r3, #10
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	430a      	orrs	r2, r1
 8000d92:	609a      	str	r2, [r3, #8]
}
 8000d94:	bf00      	nop
 8000d96:	3714      	adds	r7, #20
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	40012300 	.word	0x40012300
 8000da4:	0f000001 	.word	0x0f000001

08000da8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000db4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dba:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d13c      	bne.n	8000e3c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d12b      	bne.n	8000e34 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d127      	bne.n	8000e34 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d006      	beq.n	8000e00 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d119      	bne.n	8000e34 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	685a      	ldr	r2, [r3, #4]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f022 0220 	bic.w	r2, r2, #32
 8000e0e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d105      	bne.n	8000e34 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2c:	f043 0201 	orr.w	r2, r3, #1
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000e34:	68f8      	ldr	r0, [r7, #12]
 8000e36:	f7ff fd6b 	bl	8000910 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8000e3a:	e00e      	b.n	8000e5a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e40:	f003 0310 	and.w	r3, r3, #16
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d003      	beq.n	8000e50 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8000e48:	68f8      	ldr	r0, [r7, #12]
 8000e4a:	f7ff fd75 	bl	8000938 <HAL_ADC_ErrorCallback>
}
 8000e4e:	e004      	b.n	8000e5a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	4798      	blx	r3
}
 8000e5a:	bf00      	nop
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b084      	sub	sp, #16
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e6e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000e70:	68f8      	ldr	r0, [r7, #12]
 8000e72:	f7ff fd57 	bl	8000924 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000e76:	bf00      	nop
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b084      	sub	sp, #16
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e8a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	2240      	movs	r2, #64	; 0x40
 8000e90:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	f043 0204 	orr.w	r2, r3, #4
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000e9e:	68f8      	ldr	r0, [r7, #12]
 8000ea0:	f7ff fd4a 	bl	8000938 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000ea4:	bf00      	nop
 8000ea6:	3710      	adds	r7, #16
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ec2:	68ba      	ldr	r2, [r7, #8]
 8000ec4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ec8:	4013      	ands	r3, r2
 8000eca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000edc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ede:	4a04      	ldr	r2, [pc, #16]	; (8000ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	60d3      	str	r3, [r2, #12]
}
 8000ee4:	bf00      	nop
 8000ee6:	3714      	adds	r7, #20
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef8:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <__NVIC_GetPriorityGrouping+0x18>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	0a1b      	lsrs	r3, r3, #8
 8000efe:	f003 0307 	and.w	r3, r3, #7
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	db0b      	blt.n	8000f3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	f003 021f 	and.w	r2, r3, #31
 8000f28:	4907      	ldr	r1, [pc, #28]	; (8000f48 <__NVIC_EnableIRQ+0x38>)
 8000f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2e:	095b      	lsrs	r3, r3, #5
 8000f30:	2001      	movs	r0, #1
 8000f32:	fa00 f202 	lsl.w	r2, r0, r2
 8000f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000e100 	.word	0xe000e100

08000f4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	6039      	str	r1, [r7, #0]
 8000f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	db0a      	blt.n	8000f76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	490c      	ldr	r1, [pc, #48]	; (8000f98 <__NVIC_SetPriority+0x4c>)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	0112      	lsls	r2, r2, #4
 8000f6c:	b2d2      	uxtb	r2, r2
 8000f6e:	440b      	add	r3, r1
 8000f70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f74:	e00a      	b.n	8000f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	4908      	ldr	r1, [pc, #32]	; (8000f9c <__NVIC_SetPriority+0x50>)
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	f003 030f 	and.w	r3, r3, #15
 8000f82:	3b04      	subs	r3, #4
 8000f84:	0112      	lsls	r2, r2, #4
 8000f86:	b2d2      	uxtb	r2, r2
 8000f88:	440b      	add	r3, r1
 8000f8a:	761a      	strb	r2, [r3, #24]
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000e100 	.word	0xe000e100
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b089      	sub	sp, #36	; 0x24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	f1c3 0307 	rsb	r3, r3, #7
 8000fba:	2b04      	cmp	r3, #4
 8000fbc:	bf28      	it	cs
 8000fbe:	2304      	movcs	r3, #4
 8000fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	3304      	adds	r3, #4
 8000fc6:	2b06      	cmp	r3, #6
 8000fc8:	d902      	bls.n	8000fd0 <NVIC_EncodePriority+0x30>
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3b03      	subs	r3, #3
 8000fce:	e000      	b.n	8000fd2 <NVIC_EncodePriority+0x32>
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43da      	mvns	r2, r3
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	401a      	ands	r2, r3
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff2:	43d9      	mvns	r1, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff8:	4313      	orrs	r3, r2
         );
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3724      	adds	r7, #36	; 0x24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
	...

08001008 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3b01      	subs	r3, #1
 8001014:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001018:	d301      	bcc.n	800101e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800101a:	2301      	movs	r3, #1
 800101c:	e00f      	b.n	800103e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800101e:	4a0a      	ldr	r2, [pc, #40]	; (8001048 <SysTick_Config+0x40>)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3b01      	subs	r3, #1
 8001024:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001026:	210f      	movs	r1, #15
 8001028:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800102c:	f7ff ff8e 	bl	8000f4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001030:	4b05      	ldr	r3, [pc, #20]	; (8001048 <SysTick_Config+0x40>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001036:	4b04      	ldr	r3, [pc, #16]	; (8001048 <SysTick_Config+0x40>)
 8001038:	2207      	movs	r2, #7
 800103a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	e000e010 	.word	0xe000e010

0800104c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f7ff ff29 	bl	8000eac <__NVIC_SetPriorityGrouping>
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001062:	b580      	push	{r7, lr}
 8001064:	b086      	sub	sp, #24
 8001066:	af00      	add	r7, sp, #0
 8001068:	4603      	mov	r3, r0
 800106a:	60b9      	str	r1, [r7, #8]
 800106c:	607a      	str	r2, [r7, #4]
 800106e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001074:	f7ff ff3e 	bl	8000ef4 <__NVIC_GetPriorityGrouping>
 8001078:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	68b9      	ldr	r1, [r7, #8]
 800107e:	6978      	ldr	r0, [r7, #20]
 8001080:	f7ff ff8e 	bl	8000fa0 <NVIC_EncodePriority>
 8001084:	4602      	mov	r2, r0
 8001086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800108a:	4611      	mov	r1, r2
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ff5d 	bl	8000f4c <__NVIC_SetPriority>
}
 8001092:	bf00      	nop
 8001094:	3718      	adds	r7, #24
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
 80010a0:	4603      	mov	r3, r0
 80010a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ff31 	bl	8000f10 <__NVIC_EnableIRQ>
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff ffa2 	bl	8001008 <SysTick_Config>
 80010c4:	4603      	mov	r3, r0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80010dc:	f7ff fab4 	bl	8000648 <HAL_GetTick>
 80010e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d101      	bne.n	80010ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e099      	b.n	8001220 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2202      	movs	r2, #2
 80010f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f022 0201 	bic.w	r2, r2, #1
 800110a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800110c:	e00f      	b.n	800112e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800110e:	f7ff fa9b 	bl	8000648 <HAL_GetTick>
 8001112:	4602      	mov	r2, r0
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	2b05      	cmp	r3, #5
 800111a:	d908      	bls.n	800112e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2220      	movs	r2, #32
 8001120:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2203      	movs	r2, #3
 8001126:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800112a:	2303      	movs	r3, #3
 800112c:	e078      	b.n	8001220 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 0301 	and.w	r3, r3, #1
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1e8      	bne.n	800110e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001144:	697a      	ldr	r2, [r7, #20]
 8001146:	4b38      	ldr	r3, [pc, #224]	; (8001228 <HAL_DMA_Init+0x158>)
 8001148:	4013      	ands	r3, r2
 800114a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685a      	ldr	r2, [r3, #4]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800115a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	691b      	ldr	r3, [r3, #16]
 8001160:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001166:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001172:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6a1b      	ldr	r3, [r3, #32]
 8001178:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800117a:	697a      	ldr	r2, [r7, #20]
 800117c:	4313      	orrs	r3, r2
 800117e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001184:	2b04      	cmp	r3, #4
 8001186:	d107      	bne.n	8001198 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001190:	4313      	orrs	r3, r2
 8001192:	697a      	ldr	r2, [r7, #20]
 8001194:	4313      	orrs	r3, r2
 8001196:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	697a      	ldr	r2, [r7, #20]
 800119e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	f023 0307 	bic.w	r3, r3, #7
 80011ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b4:	697a      	ldr	r2, [r7, #20]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011be:	2b04      	cmp	r3, #4
 80011c0:	d117      	bne.n	80011f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d00e      	beq.n	80011f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f000 fa6f 	bl	80016b8 <DMA_CheckFifoParam>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d008      	beq.n	80011f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2240      	movs	r2, #64	; 0x40
 80011e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2201      	movs	r2, #1
 80011ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80011ee:	2301      	movs	r3, #1
 80011f0:	e016      	b.n	8001220 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	697a      	ldr	r2, [r7, #20]
 80011f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f000 fa26 	bl	800164c <DMA_CalcBaseAndBitshift>
 8001200:	4603      	mov	r3, r0
 8001202:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001208:	223f      	movs	r2, #63	; 0x3f
 800120a:	409a      	lsls	r2, r3
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2201      	movs	r2, #1
 800121a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800121e:	2300      	movs	r3, #0
}
 8001220:	4618      	mov	r0, r3
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	f010803f 	.word	0xf010803f

0800122c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
 8001238:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800123a:	2300      	movs	r3, #0
 800123c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001242:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800124a:	2b01      	cmp	r3, #1
 800124c:	d101      	bne.n	8001252 <HAL_DMA_Start_IT+0x26>
 800124e:	2302      	movs	r3, #2
 8001250:	e040      	b.n	80012d4 <HAL_DMA_Start_IT+0xa8>
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	2201      	movs	r2, #1
 8001256:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001260:	b2db      	uxtb	r3, r3
 8001262:	2b01      	cmp	r3, #1
 8001264:	d12f      	bne.n	80012c6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2202      	movs	r2, #2
 800126a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	2200      	movs	r2, #0
 8001272:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	68b9      	ldr	r1, [r7, #8]
 800127a:	68f8      	ldr	r0, [r7, #12]
 800127c:	f000 f9b8 	bl	80015f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001284:	223f      	movs	r2, #63	; 0x3f
 8001286:	409a      	lsls	r2, r3
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f042 0216 	orr.w	r2, r2, #22
 800129a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d007      	beq.n	80012b4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f042 0208 	orr.w	r2, r2, #8
 80012b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f042 0201 	orr.w	r2, r2, #1
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	e005      	b.n	80012d2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	2200      	movs	r2, #0
 80012ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80012ce:	2302      	movs	r3, #2
 80012d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80012d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3718      	adds	r7, #24
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80012e8:	4b8e      	ldr	r3, [pc, #568]	; (8001524 <HAL_DMA_IRQHandler+0x248>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a8e      	ldr	r2, [pc, #568]	; (8001528 <HAL_DMA_IRQHandler+0x24c>)
 80012ee:	fba2 2303 	umull	r2, r3, r2, r3
 80012f2:	0a9b      	lsrs	r3, r3, #10
 80012f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001306:	2208      	movs	r2, #8
 8001308:	409a      	lsls	r2, r3
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	4013      	ands	r3, r2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d01a      	beq.n	8001348 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0304 	and.w	r3, r3, #4
 800131c:	2b00      	cmp	r3, #0
 800131e:	d013      	beq.n	8001348 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f022 0204 	bic.w	r2, r2, #4
 800132e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001334:	2208      	movs	r2, #8
 8001336:	409a      	lsls	r2, r3
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001340:	f043 0201 	orr.w	r2, r3, #1
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800134c:	2201      	movs	r2, #1
 800134e:	409a      	lsls	r2, r3
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4013      	ands	r3, r2
 8001354:	2b00      	cmp	r3, #0
 8001356:	d012      	beq.n	800137e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001362:	2b00      	cmp	r3, #0
 8001364:	d00b      	beq.n	800137e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800136a:	2201      	movs	r2, #1
 800136c:	409a      	lsls	r2, r3
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001376:	f043 0202 	orr.w	r2, r3, #2
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001382:	2204      	movs	r2, #4
 8001384:	409a      	lsls	r2, r3
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	4013      	ands	r3, r2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d012      	beq.n	80013b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0302 	and.w	r3, r3, #2
 8001398:	2b00      	cmp	r3, #0
 800139a:	d00b      	beq.n	80013b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013a0:	2204      	movs	r2, #4
 80013a2:	409a      	lsls	r2, r3
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ac:	f043 0204 	orr.w	r2, r3, #4
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013b8:	2210      	movs	r2, #16
 80013ba:	409a      	lsls	r2, r3
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	4013      	ands	r3, r2
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d043      	beq.n	800144c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0308 	and.w	r3, r3, #8
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d03c      	beq.n	800144c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d6:	2210      	movs	r2, #16
 80013d8:	409a      	lsls	r2, r3
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d018      	beq.n	800141e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d108      	bne.n	800140c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d024      	beq.n	800144c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	4798      	blx	r3
 800140a:	e01f      	b.n	800144c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001410:	2b00      	cmp	r3, #0
 8001412:	d01b      	beq.n	800144c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	4798      	blx	r3
 800141c:	e016      	b.n	800144c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001428:	2b00      	cmp	r3, #0
 800142a:	d107      	bne.n	800143c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f022 0208 	bic.w	r2, r2, #8
 800143a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001440:	2b00      	cmp	r3, #0
 8001442:	d003      	beq.n	800144c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001450:	2220      	movs	r2, #32
 8001452:	409a      	lsls	r2, r3
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	4013      	ands	r3, r2
 8001458:	2b00      	cmp	r3, #0
 800145a:	f000 808f 	beq.w	800157c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0310 	and.w	r3, r3, #16
 8001468:	2b00      	cmp	r3, #0
 800146a:	f000 8087 	beq.w	800157c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001472:	2220      	movs	r2, #32
 8001474:	409a      	lsls	r2, r3
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b05      	cmp	r3, #5
 8001484:	d136      	bne.n	80014f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f022 0216 	bic.w	r2, r2, #22
 8001494:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	695a      	ldr	r2, [r3, #20]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d103      	bne.n	80014b6 <HAL_DMA_IRQHandler+0x1da>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d007      	beq.n	80014c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f022 0208 	bic.w	r2, r2, #8
 80014c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ca:	223f      	movs	r2, #63	; 0x3f
 80014cc:	409a      	lsls	r2, r3
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2201      	movs	r2, #1
 80014d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d07e      	beq.n	80015e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	4798      	blx	r3
        }
        return;
 80014f2:	e079      	b.n	80015e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d01d      	beq.n	800153e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d10d      	bne.n	800152c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001514:	2b00      	cmp	r3, #0
 8001516:	d031      	beq.n	800157c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	4798      	blx	r3
 8001520:	e02c      	b.n	800157c <HAL_DMA_IRQHandler+0x2a0>
 8001522:	bf00      	nop
 8001524:	20000008 	.word	0x20000008
 8001528:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001530:	2b00      	cmp	r3, #0
 8001532:	d023      	beq.n	800157c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	4798      	blx	r3
 800153c:	e01e      	b.n	800157c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001548:	2b00      	cmp	r3, #0
 800154a:	d10f      	bne.n	800156c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f022 0210 	bic.w	r2, r2, #16
 800155a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2201      	movs	r2, #1
 8001560:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2200      	movs	r2, #0
 8001568:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001570:	2b00      	cmp	r3, #0
 8001572:	d003      	beq.n	800157c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001580:	2b00      	cmp	r3, #0
 8001582:	d032      	beq.n	80015ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	2b00      	cmp	r3, #0
 800158e:	d022      	beq.n	80015d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2205      	movs	r2, #5
 8001594:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f022 0201 	bic.w	r2, r2, #1
 80015a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	3301      	adds	r3, #1
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	697a      	ldr	r2, [r7, #20]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d307      	bcc.n	80015c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1f2      	bne.n	80015a8 <HAL_DMA_IRQHandler+0x2cc>
 80015c2:	e000      	b.n	80015c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80015c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2201      	movs	r2, #1
 80015ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d005      	beq.n	80015ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	4798      	blx	r3
 80015e6:	e000      	b.n	80015ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80015e8:	bf00      	nop
    }
  }
}
 80015ea:	3718      	adds	r7, #24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
 80015fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800160c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	683a      	ldr	r2, [r7, #0]
 8001614:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	2b40      	cmp	r3, #64	; 0x40
 800161c:	d108      	bne.n	8001630 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	68ba      	ldr	r2, [r7, #8]
 800162c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800162e:	e007      	b.n	8001640 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	68ba      	ldr	r2, [r7, #8]
 8001636:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	60da      	str	r2, [r3, #12]
}
 8001640:	bf00      	nop
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	b2db      	uxtb	r3, r3
 800165a:	3b10      	subs	r3, #16
 800165c:	4a14      	ldr	r2, [pc, #80]	; (80016b0 <DMA_CalcBaseAndBitshift+0x64>)
 800165e:	fba2 2303 	umull	r2, r3, r2, r3
 8001662:	091b      	lsrs	r3, r3, #4
 8001664:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001666:	4a13      	ldr	r2, [pc, #76]	; (80016b4 <DMA_CalcBaseAndBitshift+0x68>)
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	4413      	add	r3, r2
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	461a      	mov	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2b03      	cmp	r3, #3
 8001678:	d909      	bls.n	800168e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001682:	f023 0303 	bic.w	r3, r3, #3
 8001686:	1d1a      	adds	r2, r3, #4
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	659a      	str	r2, [r3, #88]	; 0x58
 800168c:	e007      	b.n	800169e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001696:	f023 0303 	bic.w	r3, r3, #3
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3714      	adds	r7, #20
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	aaaaaaab 	.word	0xaaaaaaab
 80016b4:	0800434c 	.word	0x0800434c

080016b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016c0:	2300      	movs	r3, #0
 80016c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d11f      	bne.n	8001712 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	2b03      	cmp	r3, #3
 80016d6:	d856      	bhi.n	8001786 <DMA_CheckFifoParam+0xce>
 80016d8:	a201      	add	r2, pc, #4	; (adr r2, 80016e0 <DMA_CheckFifoParam+0x28>)
 80016da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016de:	bf00      	nop
 80016e0:	080016f1 	.word	0x080016f1
 80016e4:	08001703 	.word	0x08001703
 80016e8:	080016f1 	.word	0x080016f1
 80016ec:	08001787 	.word	0x08001787
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d046      	beq.n	800178a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001700:	e043      	b.n	800178a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001706:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800170a:	d140      	bne.n	800178e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001710:	e03d      	b.n	800178e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800171a:	d121      	bne.n	8001760 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	2b03      	cmp	r3, #3
 8001720:	d837      	bhi.n	8001792 <DMA_CheckFifoParam+0xda>
 8001722:	a201      	add	r2, pc, #4	; (adr r2, 8001728 <DMA_CheckFifoParam+0x70>)
 8001724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001728:	08001739 	.word	0x08001739
 800172c:	0800173f 	.word	0x0800173f
 8001730:	08001739 	.word	0x08001739
 8001734:	08001751 	.word	0x08001751
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	73fb      	strb	r3, [r7, #15]
      break;
 800173c:	e030      	b.n	80017a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001742:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d025      	beq.n	8001796 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800174e:	e022      	b.n	8001796 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001754:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001758:	d11f      	bne.n	800179a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800175e:	e01c      	b.n	800179a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	2b02      	cmp	r3, #2
 8001764:	d903      	bls.n	800176e <DMA_CheckFifoParam+0xb6>
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	2b03      	cmp	r3, #3
 800176a:	d003      	beq.n	8001774 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800176c:	e018      	b.n	80017a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	73fb      	strb	r3, [r7, #15]
      break;
 8001772:	e015      	b.n	80017a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001778:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d00e      	beq.n	800179e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	73fb      	strb	r3, [r7, #15]
      break;
 8001784:	e00b      	b.n	800179e <DMA_CheckFifoParam+0xe6>
      break;
 8001786:	bf00      	nop
 8001788:	e00a      	b.n	80017a0 <DMA_CheckFifoParam+0xe8>
      break;
 800178a:	bf00      	nop
 800178c:	e008      	b.n	80017a0 <DMA_CheckFifoParam+0xe8>
      break;
 800178e:	bf00      	nop
 8001790:	e006      	b.n	80017a0 <DMA_CheckFifoParam+0xe8>
      break;
 8001792:	bf00      	nop
 8001794:	e004      	b.n	80017a0 <DMA_CheckFifoParam+0xe8>
      break;
 8001796:	bf00      	nop
 8001798:	e002      	b.n	80017a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800179a:	bf00      	nop
 800179c:	e000      	b.n	80017a0 <DMA_CheckFifoParam+0xe8>
      break;
 800179e:	bf00      	nop
    }
  } 
  
  return status; 
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop

080017b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b089      	sub	sp, #36	; 0x24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017be:	2300      	movs	r3, #0
 80017c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017c6:	2300      	movs	r3, #0
 80017c8:	61fb      	str	r3, [r7, #28]
 80017ca:	e159      	b.n	8001a80 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017cc:	2201      	movs	r2, #1
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	4013      	ands	r3, r2
 80017de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	f040 8148 	bne.w	8001a7a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f003 0303 	and.w	r3, r3, #3
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d005      	beq.n	8001802 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d130      	bne.n	8001864 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	2203      	movs	r2, #3
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4013      	ands	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	68da      	ldr	r2, [r3, #12]
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4313      	orrs	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001838:	2201      	movs	r2, #1
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4013      	ands	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	091b      	lsrs	r3, r3, #4
 800184e:	f003 0201 	and.w	r2, r3, #1
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4313      	orrs	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f003 0303 	and.w	r3, r3, #3
 800186c:	2b03      	cmp	r3, #3
 800186e:	d017      	beq.n	80018a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	2203      	movs	r2, #3
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	43db      	mvns	r3, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4013      	ands	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4313      	orrs	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f003 0303 	and.w	r3, r3, #3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d123      	bne.n	80018f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	08da      	lsrs	r2, r3, #3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3208      	adds	r2, #8
 80018b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	220f      	movs	r2, #15
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	43db      	mvns	r3, r3
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	4013      	ands	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	691a      	ldr	r2, [r3, #16]
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	08da      	lsrs	r2, r3, #3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	3208      	adds	r2, #8
 80018ee:	69b9      	ldr	r1, [r7, #24]
 80018f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	2203      	movs	r2, #3
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	43db      	mvns	r3, r3
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4013      	ands	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 0203 	and.w	r2, r3, #3
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4313      	orrs	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001930:	2b00      	cmp	r3, #0
 8001932:	f000 80a2 	beq.w	8001a7a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	4b57      	ldr	r3, [pc, #348]	; (8001a98 <HAL_GPIO_Init+0x2e8>)
 800193c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193e:	4a56      	ldr	r2, [pc, #344]	; (8001a98 <HAL_GPIO_Init+0x2e8>)
 8001940:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001944:	6453      	str	r3, [r2, #68]	; 0x44
 8001946:	4b54      	ldr	r3, [pc, #336]	; (8001a98 <HAL_GPIO_Init+0x2e8>)
 8001948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001952:	4a52      	ldr	r2, [pc, #328]	; (8001a9c <HAL_GPIO_Init+0x2ec>)
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	089b      	lsrs	r3, r3, #2
 8001958:	3302      	adds	r3, #2
 800195a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800195e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	f003 0303 	and.w	r3, r3, #3
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	220f      	movs	r2, #15
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43db      	mvns	r3, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4013      	ands	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a49      	ldr	r2, [pc, #292]	; (8001aa0 <HAL_GPIO_Init+0x2f0>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d019      	beq.n	80019b2 <HAL_GPIO_Init+0x202>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a48      	ldr	r2, [pc, #288]	; (8001aa4 <HAL_GPIO_Init+0x2f4>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d013      	beq.n	80019ae <HAL_GPIO_Init+0x1fe>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a47      	ldr	r2, [pc, #284]	; (8001aa8 <HAL_GPIO_Init+0x2f8>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d00d      	beq.n	80019aa <HAL_GPIO_Init+0x1fa>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a46      	ldr	r2, [pc, #280]	; (8001aac <HAL_GPIO_Init+0x2fc>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d007      	beq.n	80019a6 <HAL_GPIO_Init+0x1f6>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a45      	ldr	r2, [pc, #276]	; (8001ab0 <HAL_GPIO_Init+0x300>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d101      	bne.n	80019a2 <HAL_GPIO_Init+0x1f2>
 800199e:	2304      	movs	r3, #4
 80019a0:	e008      	b.n	80019b4 <HAL_GPIO_Init+0x204>
 80019a2:	2307      	movs	r3, #7
 80019a4:	e006      	b.n	80019b4 <HAL_GPIO_Init+0x204>
 80019a6:	2303      	movs	r3, #3
 80019a8:	e004      	b.n	80019b4 <HAL_GPIO_Init+0x204>
 80019aa:	2302      	movs	r3, #2
 80019ac:	e002      	b.n	80019b4 <HAL_GPIO_Init+0x204>
 80019ae:	2301      	movs	r3, #1
 80019b0:	e000      	b.n	80019b4 <HAL_GPIO_Init+0x204>
 80019b2:	2300      	movs	r3, #0
 80019b4:	69fa      	ldr	r2, [r7, #28]
 80019b6:	f002 0203 	and.w	r2, r2, #3
 80019ba:	0092      	lsls	r2, r2, #2
 80019bc:	4093      	lsls	r3, r2
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019c4:	4935      	ldr	r1, [pc, #212]	; (8001a9c <HAL_GPIO_Init+0x2ec>)
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	089b      	lsrs	r3, r3, #2
 80019ca:	3302      	adds	r3, #2
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019d2:	4b38      	ldr	r3, [pc, #224]	; (8001ab4 <HAL_GPIO_Init+0x304>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	43db      	mvns	r3, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4013      	ands	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d003      	beq.n	80019f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019f6:	4a2f      	ldr	r2, [pc, #188]	; (8001ab4 <HAL_GPIO_Init+0x304>)
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019fc:	4b2d      	ldr	r3, [pc, #180]	; (8001ab4 <HAL_GPIO_Init+0x304>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	43db      	mvns	r3, r3
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d003      	beq.n	8001a20 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a20:	4a24      	ldr	r2, [pc, #144]	; (8001ab4 <HAL_GPIO_Init+0x304>)
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a26:	4b23      	ldr	r3, [pc, #140]	; (8001ab4 <HAL_GPIO_Init+0x304>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4013      	ands	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d003      	beq.n	8001a4a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a4a:	4a1a      	ldr	r2, [pc, #104]	; (8001ab4 <HAL_GPIO_Init+0x304>)
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a50:	4b18      	ldr	r3, [pc, #96]	; (8001ab4 <HAL_GPIO_Init+0x304>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a74:	4a0f      	ldr	r2, [pc, #60]	; (8001ab4 <HAL_GPIO_Init+0x304>)
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	61fb      	str	r3, [r7, #28]
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	2b0f      	cmp	r3, #15
 8001a84:	f67f aea2 	bls.w	80017cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a88:	bf00      	nop
 8001a8a:	bf00      	nop
 8001a8c:	3724      	adds	r7, #36	; 0x24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40013800 	.word	0x40013800
 8001aa0:	40020000 	.word	0x40020000
 8001aa4:	40020400 	.word	0x40020400
 8001aa8:	40020800 	.word	0x40020800
 8001aac:	40020c00 	.word	0x40020c00
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	40013c00 	.word	0x40013c00

08001ab8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	807b      	strh	r3, [r7, #2]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ac8:	787b      	ldrb	r3, [r7, #1]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ace:	887a      	ldrh	r2, [r7, #2]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ad4:	e003      	b.n	8001ade <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ad6:	887b      	ldrh	r3, [r7, #2]
 8001ad8:	041a      	lsls	r2, r3, #16
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	619a      	str	r2, [r3, #24]
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
	...

08001aec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d101      	bne.n	8001afe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e12b      	b.n	8001d56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d106      	bne.n	8001b18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f001 fb94 	bl	8003240 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2224      	movs	r2, #36	; 0x24
 8001b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f022 0201 	bic.w	r2, r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b50:	f001 f8da 	bl	8002d08 <HAL_RCC_GetPCLK1Freq>
 8001b54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	4a81      	ldr	r2, [pc, #516]	; (8001d60 <HAL_I2C_Init+0x274>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d807      	bhi.n	8001b70 <HAL_I2C_Init+0x84>
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	4a80      	ldr	r2, [pc, #512]	; (8001d64 <HAL_I2C_Init+0x278>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	bf94      	ite	ls
 8001b68:	2301      	movls	r3, #1
 8001b6a:	2300      	movhi	r3, #0
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	e006      	b.n	8001b7e <HAL_I2C_Init+0x92>
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	4a7d      	ldr	r2, [pc, #500]	; (8001d68 <HAL_I2C_Init+0x27c>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	bf94      	ite	ls
 8001b78:	2301      	movls	r3, #1
 8001b7a:	2300      	movhi	r3, #0
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e0e7      	b.n	8001d56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	4a78      	ldr	r2, [pc, #480]	; (8001d6c <HAL_I2C_Init+0x280>)
 8001b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8e:	0c9b      	lsrs	r3, r3, #18
 8001b90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	68ba      	ldr	r2, [r7, #8]
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6a1b      	ldr	r3, [r3, #32]
 8001bac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	4a6a      	ldr	r2, [pc, #424]	; (8001d60 <HAL_I2C_Init+0x274>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d802      	bhi.n	8001bc0 <HAL_I2C_Init+0xd4>
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	e009      	b.n	8001bd4 <HAL_I2C_Init+0xe8>
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001bc6:	fb02 f303 	mul.w	r3, r2, r3
 8001bca:	4a69      	ldr	r2, [pc, #420]	; (8001d70 <HAL_I2C_Init+0x284>)
 8001bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd0:	099b      	lsrs	r3, r3, #6
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	6812      	ldr	r2, [r2, #0]
 8001bd8:	430b      	orrs	r3, r1
 8001bda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001be6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	495c      	ldr	r1, [pc, #368]	; (8001d60 <HAL_I2C_Init+0x274>)
 8001bf0:	428b      	cmp	r3, r1
 8001bf2:	d819      	bhi.n	8001c28 <HAL_I2C_Init+0x13c>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	1e59      	subs	r1, r3, #1
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c02:	1c59      	adds	r1, r3, #1
 8001c04:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001c08:	400b      	ands	r3, r1
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00a      	beq.n	8001c24 <HAL_I2C_Init+0x138>
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	1e59      	subs	r1, r3, #1
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c22:	e051      	b.n	8001cc8 <HAL_I2C_Init+0x1dc>
 8001c24:	2304      	movs	r3, #4
 8001c26:	e04f      	b.n	8001cc8 <HAL_I2C_Init+0x1dc>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d111      	bne.n	8001c54 <HAL_I2C_Init+0x168>
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	1e58      	subs	r0, r3, #1
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6859      	ldr	r1, [r3, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	440b      	add	r3, r1
 8001c3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c42:	3301      	adds	r3, #1
 8001c44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	bf0c      	ite	eq
 8001c4c:	2301      	moveq	r3, #1
 8001c4e:	2300      	movne	r3, #0
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	e012      	b.n	8001c7a <HAL_I2C_Init+0x18e>
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	1e58      	subs	r0, r3, #1
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6859      	ldr	r1, [r3, #4]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	440b      	add	r3, r1
 8001c62:	0099      	lsls	r1, r3, #2
 8001c64:	440b      	add	r3, r1
 8001c66:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	bf0c      	ite	eq
 8001c74:	2301      	moveq	r3, #1
 8001c76:	2300      	movne	r3, #0
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <HAL_I2C_Init+0x196>
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e022      	b.n	8001cc8 <HAL_I2C_Init+0x1dc>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d10e      	bne.n	8001ca8 <HAL_I2C_Init+0x1bc>
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	1e58      	subs	r0, r3, #1
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6859      	ldr	r1, [r3, #4]
 8001c92:	460b      	mov	r3, r1
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	440b      	add	r3, r1
 8001c98:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ca2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ca6:	e00f      	b.n	8001cc8 <HAL_I2C_Init+0x1dc>
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	1e58      	subs	r0, r3, #1
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6859      	ldr	r1, [r3, #4]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	440b      	add	r3, r1
 8001cb6:	0099      	lsls	r1, r3, #2
 8001cb8:	440b      	add	r3, r1
 8001cba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cc8:	6879      	ldr	r1, [r7, #4]
 8001cca:	6809      	ldr	r1, [r1, #0]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	69da      	ldr	r2, [r3, #28]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a1b      	ldr	r3, [r3, #32]
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001cf6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	6911      	ldr	r1, [r2, #16]
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	68d2      	ldr	r2, [r2, #12]
 8001d02:	4311      	orrs	r1, r2
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	6812      	ldr	r2, [r2, #0]
 8001d08:	430b      	orrs	r3, r1
 8001d0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	695a      	ldr	r2, [r3, #20]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	430a      	orrs	r2, r1
 8001d26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f042 0201 	orr.w	r2, r2, #1
 8001d36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2220      	movs	r2, #32
 8001d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	000186a0 	.word	0x000186a0
 8001d64:	001e847f 	.word	0x001e847f
 8001d68:	003d08ff 	.word	0x003d08ff
 8001d6c:	431bde83 	.word	0x431bde83
 8001d70:	10624dd3 	.word	0x10624dd3

08001d74 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b088      	sub	sp, #32
 8001d78:	af02      	add	r7, sp, #8
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	607a      	str	r2, [r7, #4]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	460b      	mov	r3, r1
 8001d82:	817b      	strh	r3, [r7, #10]
 8001d84:	4613      	mov	r3, r2
 8001d86:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d88:	f7fe fc5e 	bl	8000648 <HAL_GetTick>
 8001d8c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b20      	cmp	r3, #32
 8001d98:	f040 80e0 	bne.w	8001f5c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	2319      	movs	r3, #25
 8001da2:	2201      	movs	r2, #1
 8001da4:	4970      	ldr	r1, [pc, #448]	; (8001f68 <HAL_I2C_Master_Transmit+0x1f4>)
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	f000 f964 	bl	8002074 <I2C_WaitOnFlagUntilTimeout>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001db2:	2302      	movs	r3, #2
 8001db4:	e0d3      	b.n	8001f5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d101      	bne.n	8001dc4 <HAL_I2C_Master_Transmit+0x50>
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	e0cc      	b.n	8001f5e <HAL_I2C_Master_Transmit+0x1ea>
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d007      	beq.n	8001dea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f042 0201 	orr.w	r2, r2, #1
 8001de8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001df8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2221      	movs	r2, #33	; 0x21
 8001dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2210      	movs	r2, #16
 8001e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	893a      	ldrh	r2, [r7, #8]
 8001e1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	4a50      	ldr	r2, [pc, #320]	; (8001f6c <HAL_I2C_Master_Transmit+0x1f8>)
 8001e2a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e2c:	8979      	ldrh	r1, [r7, #10]
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	6a3a      	ldr	r2, [r7, #32]
 8001e32:	68f8      	ldr	r0, [r7, #12]
 8001e34:	f000 f89c 	bl	8001f70 <I2C_MasterRequestWrite>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e08d      	b.n	8001f5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e42:	2300      	movs	r3, #0
 8001e44:	613b      	str	r3, [r7, #16]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	613b      	str	r3, [r7, #16]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	613b      	str	r3, [r7, #16]
 8001e56:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001e58:	e066      	b.n	8001f28 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	6a39      	ldr	r1, [r7, #32]
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f000 fa22 	bl	80022a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d00d      	beq.n	8001e86 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	2b04      	cmp	r3, #4
 8001e70:	d107      	bne.n	8001e82 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e06b      	b.n	8001f5e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8a:	781a      	ldrb	r2, [r3, #0]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e96:	1c5a      	adds	r2, r3, #1
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	695b      	ldr	r3, [r3, #20]
 8001ebc:	f003 0304 	and.w	r3, r3, #4
 8001ec0:	2b04      	cmp	r3, #4
 8001ec2:	d11b      	bne.n	8001efc <HAL_I2C_Master_Transmit+0x188>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d017      	beq.n	8001efc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed0:	781a      	ldrb	r2, [r3, #0]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001edc:	1c5a      	adds	r2, r3, #1
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001efc:	697a      	ldr	r2, [r7, #20]
 8001efe:	6a39      	ldr	r1, [r7, #32]
 8001f00:	68f8      	ldr	r0, [r7, #12]
 8001f02:	f000 fa19 	bl	8002338 <I2C_WaitOnBTFFlagUntilTimeout>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d00d      	beq.n	8001f28 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f10:	2b04      	cmp	r3, #4
 8001f12:	d107      	bne.n	8001f24 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f22:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e01a      	b.n	8001f5e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d194      	bne.n	8001e5a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2220      	movs	r2, #32
 8001f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	e000      	b.n	8001f5e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001f5c:	2302      	movs	r3, #2
  }
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3718      	adds	r7, #24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	00100002 	.word	0x00100002
 8001f6c:	ffff0000 	.word	0xffff0000

08001f70 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b088      	sub	sp, #32
 8001f74:	af02      	add	r7, sp, #8
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	607a      	str	r2, [r7, #4]
 8001f7a:	603b      	str	r3, [r7, #0]
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f84:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	2b08      	cmp	r3, #8
 8001f8a:	d006      	beq.n	8001f9a <I2C_MasterRequestWrite+0x2a>
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d003      	beq.n	8001f9a <I2C_MasterRequestWrite+0x2a>
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f98:	d108      	bne.n	8001fac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	e00b      	b.n	8001fc4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb0:	2b12      	cmp	r3, #18
 8001fb2:	d107      	bne.n	8001fc4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fc2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001fd0:	68f8      	ldr	r0, [r7, #12]
 8001fd2:	f000 f84f 	bl	8002074 <I2C_WaitOnFlagUntilTimeout>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d00d      	beq.n	8001ff8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fea:	d103      	bne.n	8001ff4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ff2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e035      	b.n	8002064 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002000:	d108      	bne.n	8002014 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002002:	897b      	ldrh	r3, [r7, #10]
 8002004:	b2db      	uxtb	r3, r3
 8002006:	461a      	mov	r2, r3
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002010:	611a      	str	r2, [r3, #16]
 8002012:	e01b      	b.n	800204c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002014:	897b      	ldrh	r3, [r7, #10]
 8002016:	11db      	asrs	r3, r3, #7
 8002018:	b2db      	uxtb	r3, r3
 800201a:	f003 0306 	and.w	r3, r3, #6
 800201e:	b2db      	uxtb	r3, r3
 8002020:	f063 030f 	orn	r3, r3, #15
 8002024:	b2da      	uxtb	r2, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	490e      	ldr	r1, [pc, #56]	; (800206c <I2C_MasterRequestWrite+0xfc>)
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f000 f898 	bl	8002168 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e010      	b.n	8002064 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002042:	897b      	ldrh	r3, [r7, #10]
 8002044:	b2da      	uxtb	r2, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	4907      	ldr	r1, [pc, #28]	; (8002070 <I2C_MasterRequestWrite+0x100>)
 8002052:	68f8      	ldr	r0, [r7, #12]
 8002054:	f000 f888 	bl	8002168 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e000      	b.n	8002064 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3718      	adds	r7, #24
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	00010008 	.word	0x00010008
 8002070:	00010002 	.word	0x00010002

08002074 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	603b      	str	r3, [r7, #0]
 8002080:	4613      	mov	r3, r2
 8002082:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002084:	e048      	b.n	8002118 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800208c:	d044      	beq.n	8002118 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800208e:	f7fe fadb 	bl	8000648 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	429a      	cmp	r2, r3
 800209c:	d302      	bcc.n	80020a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d139      	bne.n	8002118 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	0c1b      	lsrs	r3, r3, #16
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d10d      	bne.n	80020ca <I2C_WaitOnFlagUntilTimeout+0x56>
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	43da      	mvns	r2, r3
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	4013      	ands	r3, r2
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	2b00      	cmp	r3, #0
 80020be:	bf0c      	ite	eq
 80020c0:	2301      	moveq	r3, #1
 80020c2:	2300      	movne	r3, #0
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	461a      	mov	r2, r3
 80020c8:	e00c      	b.n	80020e4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	43da      	mvns	r2, r3
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	4013      	ands	r3, r2
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	2b00      	cmp	r3, #0
 80020da:	bf0c      	ite	eq
 80020dc:	2301      	moveq	r3, #1
 80020de:	2300      	movne	r3, #0
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	461a      	mov	r2, r3
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d116      	bne.n	8002118 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2200      	movs	r2, #0
 80020ee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2220      	movs	r2, #32
 80020f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	f043 0220 	orr.w	r2, r3, #32
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2200      	movs	r2, #0
 8002110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e023      	b.n	8002160 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	0c1b      	lsrs	r3, r3, #16
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b01      	cmp	r3, #1
 8002120:	d10d      	bne.n	800213e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	695b      	ldr	r3, [r3, #20]
 8002128:	43da      	mvns	r2, r3
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	4013      	ands	r3, r2
 800212e:	b29b      	uxth	r3, r3
 8002130:	2b00      	cmp	r3, #0
 8002132:	bf0c      	ite	eq
 8002134:	2301      	moveq	r3, #1
 8002136:	2300      	movne	r3, #0
 8002138:	b2db      	uxtb	r3, r3
 800213a:	461a      	mov	r2, r3
 800213c:	e00c      	b.n	8002158 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	43da      	mvns	r2, r3
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	4013      	ands	r3, r2
 800214a:	b29b      	uxth	r3, r3
 800214c:	2b00      	cmp	r3, #0
 800214e:	bf0c      	ite	eq
 8002150:	2301      	moveq	r3, #1
 8002152:	2300      	movne	r3, #0
 8002154:	b2db      	uxtb	r3, r3
 8002156:	461a      	mov	r2, r3
 8002158:	79fb      	ldrb	r3, [r7, #7]
 800215a:	429a      	cmp	r2, r3
 800215c:	d093      	beq.n	8002086 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
 8002174:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002176:	e071      	b.n	800225c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002182:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002186:	d123      	bne.n	80021d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002196:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2200      	movs	r2, #0
 80021a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2220      	movs	r2, #32
 80021ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021bc:	f043 0204 	orr.w	r2, r3, #4
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e067      	b.n	80022a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021d6:	d041      	beq.n	800225c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021d8:	f7fe fa36 	bl	8000648 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d302      	bcc.n	80021ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d136      	bne.n	800225c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	0c1b      	lsrs	r3, r3, #16
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d10c      	bne.n	8002212 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	43da      	mvns	r2, r3
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	4013      	ands	r3, r2
 8002204:	b29b      	uxth	r3, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	bf14      	ite	ne
 800220a:	2301      	movne	r3, #1
 800220c:	2300      	moveq	r3, #0
 800220e:	b2db      	uxtb	r3, r3
 8002210:	e00b      	b.n	800222a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	43da      	mvns	r2, r3
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	4013      	ands	r3, r2
 800221e:	b29b      	uxth	r3, r3
 8002220:	2b00      	cmp	r3, #0
 8002222:	bf14      	ite	ne
 8002224:	2301      	movne	r3, #1
 8002226:	2300      	moveq	r3, #0
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d016      	beq.n	800225c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2220      	movs	r2, #32
 8002238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002248:	f043 0220 	orr.w	r2, r3, #32
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e021      	b.n	80022a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	0c1b      	lsrs	r3, r3, #16
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b01      	cmp	r3, #1
 8002264:	d10c      	bne.n	8002280 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	43da      	mvns	r2, r3
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	4013      	ands	r3, r2
 8002272:	b29b      	uxth	r3, r3
 8002274:	2b00      	cmp	r3, #0
 8002276:	bf14      	ite	ne
 8002278:	2301      	movne	r3, #1
 800227a:	2300      	moveq	r3, #0
 800227c:	b2db      	uxtb	r3, r3
 800227e:	e00b      	b.n	8002298 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	43da      	mvns	r2, r3
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	4013      	ands	r3, r2
 800228c:	b29b      	uxth	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	bf14      	ite	ne
 8002292:	2301      	movne	r3, #1
 8002294:	2300      	moveq	r3, #0
 8002296:	b2db      	uxtb	r3, r3
 8002298:	2b00      	cmp	r3, #0
 800229a:	f47f af6d 	bne.w	8002178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022b4:	e034      	b.n	8002320 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f000 f886 	bl	80023c8 <I2C_IsAcknowledgeFailed>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e034      	b.n	8002330 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022cc:	d028      	beq.n	8002320 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ce:	f7fe f9bb 	bl	8000648 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	68ba      	ldr	r2, [r7, #8]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d302      	bcc.n	80022e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d11d      	bne.n	8002320 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ee:	2b80      	cmp	r3, #128	; 0x80
 80022f0:	d016      	beq.n	8002320 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2200      	movs	r2, #0
 80022f6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2220      	movs	r2, #32
 80022fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2200      	movs	r2, #0
 8002304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230c:	f043 0220 	orr.w	r2, r3, #32
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e007      	b.n	8002330 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800232a:	2b80      	cmp	r3, #128	; 0x80
 800232c:	d1c3      	bne.n	80022b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3710      	adds	r7, #16
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002344:	e034      	b.n	80023b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	f000 f83e 	bl	80023c8 <I2C_IsAcknowledgeFailed>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e034      	b.n	80023c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800235c:	d028      	beq.n	80023b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800235e:	f7fe f973 	bl	8000648 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	68ba      	ldr	r2, [r7, #8]
 800236a:	429a      	cmp	r2, r3
 800236c:	d302      	bcc.n	8002374 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d11d      	bne.n	80023b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	f003 0304 	and.w	r3, r3, #4
 800237e:	2b04      	cmp	r3, #4
 8002380:	d016      	beq.n	80023b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2200      	movs	r2, #0
 8002386:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2220      	movs	r2, #32
 800238c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239c:	f043 0220 	orr.w	r2, r3, #32
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e007      	b.n	80023c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	f003 0304 	and.w	r3, r3, #4
 80023ba:	2b04      	cmp	r3, #4
 80023bc:	d1c3      	bne.n	8002346 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023de:	d11b      	bne.n	8002418 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2220      	movs	r2, #32
 80023f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002404:	f043 0204 	orr.w	r2, r3, #4
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e000      	b.n	800241a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
	...

08002428 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e267      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b00      	cmp	r3, #0
 8002444:	d075      	beq.n	8002532 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002446:	4b88      	ldr	r3, [pc, #544]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 030c 	and.w	r3, r3, #12
 800244e:	2b04      	cmp	r3, #4
 8002450:	d00c      	beq.n	800246c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002452:	4b85      	ldr	r3, [pc, #532]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800245a:	2b08      	cmp	r3, #8
 800245c:	d112      	bne.n	8002484 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800245e:	4b82      	ldr	r3, [pc, #520]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002466:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800246a:	d10b      	bne.n	8002484 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800246c:	4b7e      	ldr	r3, [pc, #504]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d05b      	beq.n	8002530 <HAL_RCC_OscConfig+0x108>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d157      	bne.n	8002530 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e242      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800248c:	d106      	bne.n	800249c <HAL_RCC_OscConfig+0x74>
 800248e:	4b76      	ldr	r3, [pc, #472]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a75      	ldr	r2, [pc, #468]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 8002494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002498:	6013      	str	r3, [r2, #0]
 800249a:	e01d      	b.n	80024d8 <HAL_RCC_OscConfig+0xb0>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024a4:	d10c      	bne.n	80024c0 <HAL_RCC_OscConfig+0x98>
 80024a6:	4b70      	ldr	r3, [pc, #448]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a6f      	ldr	r2, [pc, #444]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 80024ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	4b6d      	ldr	r3, [pc, #436]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a6c      	ldr	r2, [pc, #432]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 80024b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024bc:	6013      	str	r3, [r2, #0]
 80024be:	e00b      	b.n	80024d8 <HAL_RCC_OscConfig+0xb0>
 80024c0:	4b69      	ldr	r3, [pc, #420]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a68      	ldr	r2, [pc, #416]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 80024c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ca:	6013      	str	r3, [r2, #0]
 80024cc:	4b66      	ldr	r3, [pc, #408]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a65      	ldr	r2, [pc, #404]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 80024d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d013      	beq.n	8002508 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e0:	f7fe f8b2 	bl	8000648 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024e8:	f7fe f8ae 	bl	8000648 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b64      	cmp	r3, #100	; 0x64
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e207      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024fa:	4b5b      	ldr	r3, [pc, #364]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0f0      	beq.n	80024e8 <HAL_RCC_OscConfig+0xc0>
 8002506:	e014      	b.n	8002532 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002508:	f7fe f89e 	bl	8000648 <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002510:	f7fe f89a 	bl	8000648 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b64      	cmp	r3, #100	; 0x64
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e1f3      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002522:	4b51      	ldr	r3, [pc, #324]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1f0      	bne.n	8002510 <HAL_RCC_OscConfig+0xe8>
 800252e:	e000      	b.n	8002532 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002530:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d063      	beq.n	8002606 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800253e:	4b4a      	ldr	r3, [pc, #296]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 030c 	and.w	r3, r3, #12
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00b      	beq.n	8002562 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800254a:	4b47      	ldr	r3, [pc, #284]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002552:	2b08      	cmp	r3, #8
 8002554:	d11c      	bne.n	8002590 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002556:	4b44      	ldr	r3, [pc, #272]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d116      	bne.n	8002590 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002562:	4b41      	ldr	r3, [pc, #260]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d005      	beq.n	800257a <HAL_RCC_OscConfig+0x152>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d001      	beq.n	800257a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e1c7      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800257a:	4b3b      	ldr	r3, [pc, #236]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	4937      	ldr	r1, [pc, #220]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 800258a:	4313      	orrs	r3, r2
 800258c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800258e:	e03a      	b.n	8002606 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d020      	beq.n	80025da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002598:	4b34      	ldr	r3, [pc, #208]	; (800266c <HAL_RCC_OscConfig+0x244>)
 800259a:	2201      	movs	r2, #1
 800259c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259e:	f7fe f853 	bl	8000648 <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025a6:	f7fe f84f 	bl	8000648 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e1a8      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b8:	4b2b      	ldr	r3, [pc, #172]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0f0      	beq.n	80025a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c4:	4b28      	ldr	r3, [pc, #160]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	4925      	ldr	r1, [pc, #148]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	600b      	str	r3, [r1, #0]
 80025d8:	e015      	b.n	8002606 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025da:	4b24      	ldr	r3, [pc, #144]	; (800266c <HAL_RCC_OscConfig+0x244>)
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e0:	f7fe f832 	bl	8000648 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025e8:	f7fe f82e 	bl	8000648 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e187      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025fa:	4b1b      	ldr	r3, [pc, #108]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1f0      	bne.n	80025e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0308 	and.w	r3, r3, #8
 800260e:	2b00      	cmp	r3, #0
 8002610:	d036      	beq.n	8002680 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d016      	beq.n	8002648 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800261a:	4b15      	ldr	r3, [pc, #84]	; (8002670 <HAL_RCC_OscConfig+0x248>)
 800261c:	2201      	movs	r2, #1
 800261e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002620:	f7fe f812 	bl	8000648 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002628:	f7fe f80e 	bl	8000648 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e167      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800263a:	4b0b      	ldr	r3, [pc, #44]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 800263c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d0f0      	beq.n	8002628 <HAL_RCC_OscConfig+0x200>
 8002646:	e01b      	b.n	8002680 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002648:	4b09      	ldr	r3, [pc, #36]	; (8002670 <HAL_RCC_OscConfig+0x248>)
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800264e:	f7fd fffb 	bl	8000648 <HAL_GetTick>
 8002652:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002654:	e00e      	b.n	8002674 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002656:	f7fd fff7 	bl	8000648 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d907      	bls.n	8002674 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e150      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
 8002668:	40023800 	.word	0x40023800
 800266c:	42470000 	.word	0x42470000
 8002670:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002674:	4b88      	ldr	r3, [pc, #544]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 8002676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1ea      	bne.n	8002656 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 8097 	beq.w	80027bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800268e:	2300      	movs	r3, #0
 8002690:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002692:	4b81      	ldr	r3, [pc, #516]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10f      	bne.n	80026be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	60bb      	str	r3, [r7, #8]
 80026a2:	4b7d      	ldr	r3, [pc, #500]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	4a7c      	ldr	r2, [pc, #496]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 80026a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ac:	6413      	str	r3, [r2, #64]	; 0x40
 80026ae:	4b7a      	ldr	r3, [pc, #488]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b6:	60bb      	str	r3, [r7, #8]
 80026b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ba:	2301      	movs	r3, #1
 80026bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026be:	4b77      	ldr	r3, [pc, #476]	; (800289c <HAL_RCC_OscConfig+0x474>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d118      	bne.n	80026fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ca:	4b74      	ldr	r3, [pc, #464]	; (800289c <HAL_RCC_OscConfig+0x474>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a73      	ldr	r2, [pc, #460]	; (800289c <HAL_RCC_OscConfig+0x474>)
 80026d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026d6:	f7fd ffb7 	bl	8000648 <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026dc:	e008      	b.n	80026f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026de:	f7fd ffb3 	bl	8000648 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e10c      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f0:	4b6a      	ldr	r3, [pc, #424]	; (800289c <HAL_RCC_OscConfig+0x474>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0f0      	beq.n	80026de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d106      	bne.n	8002712 <HAL_RCC_OscConfig+0x2ea>
 8002704:	4b64      	ldr	r3, [pc, #400]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 8002706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002708:	4a63      	ldr	r2, [pc, #396]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 800270a:	f043 0301 	orr.w	r3, r3, #1
 800270e:	6713      	str	r3, [r2, #112]	; 0x70
 8002710:	e01c      	b.n	800274c <HAL_RCC_OscConfig+0x324>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	2b05      	cmp	r3, #5
 8002718:	d10c      	bne.n	8002734 <HAL_RCC_OscConfig+0x30c>
 800271a:	4b5f      	ldr	r3, [pc, #380]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 800271c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271e:	4a5e      	ldr	r2, [pc, #376]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 8002720:	f043 0304 	orr.w	r3, r3, #4
 8002724:	6713      	str	r3, [r2, #112]	; 0x70
 8002726:	4b5c      	ldr	r3, [pc, #368]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 8002728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272a:	4a5b      	ldr	r2, [pc, #364]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	6713      	str	r3, [r2, #112]	; 0x70
 8002732:	e00b      	b.n	800274c <HAL_RCC_OscConfig+0x324>
 8002734:	4b58      	ldr	r3, [pc, #352]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 8002736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002738:	4a57      	ldr	r2, [pc, #348]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 800273a:	f023 0301 	bic.w	r3, r3, #1
 800273e:	6713      	str	r3, [r2, #112]	; 0x70
 8002740:	4b55      	ldr	r3, [pc, #340]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 8002742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002744:	4a54      	ldr	r2, [pc, #336]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 8002746:	f023 0304 	bic.w	r3, r3, #4
 800274a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d015      	beq.n	8002780 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002754:	f7fd ff78 	bl	8000648 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800275a:	e00a      	b.n	8002772 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800275c:	f7fd ff74 	bl	8000648 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	f241 3288 	movw	r2, #5000	; 0x1388
 800276a:	4293      	cmp	r3, r2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e0cb      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002772:	4b49      	ldr	r3, [pc, #292]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 8002774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0ee      	beq.n	800275c <HAL_RCC_OscConfig+0x334>
 800277e:	e014      	b.n	80027aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002780:	f7fd ff62 	bl	8000648 <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002786:	e00a      	b.n	800279e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002788:	f7fd ff5e 	bl	8000648 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	f241 3288 	movw	r2, #5000	; 0x1388
 8002796:	4293      	cmp	r3, r2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e0b5      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800279e:	4b3e      	ldr	r3, [pc, #248]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 80027a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1ee      	bne.n	8002788 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027aa:	7dfb      	ldrb	r3, [r7, #23]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d105      	bne.n	80027bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027b0:	4b39      	ldr	r3, [pc, #228]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 80027b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b4:	4a38      	ldr	r2, [pc, #224]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 80027b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f000 80a1 	beq.w	8002908 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027c6:	4b34      	ldr	r3, [pc, #208]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 030c 	and.w	r3, r3, #12
 80027ce:	2b08      	cmp	r3, #8
 80027d0:	d05c      	beq.n	800288c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d141      	bne.n	800285e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027da:	4b31      	ldr	r3, [pc, #196]	; (80028a0 <HAL_RCC_OscConfig+0x478>)
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e0:	f7fd ff32 	bl	8000648 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027e8:	f7fd ff2e 	bl	8000648 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e087      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027fa:	4b27      	ldr	r3, [pc, #156]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1f0      	bne.n	80027e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	69da      	ldr	r2, [r3, #28]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	431a      	orrs	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002814:	019b      	lsls	r3, r3, #6
 8002816:	431a      	orrs	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281c:	085b      	lsrs	r3, r3, #1
 800281e:	3b01      	subs	r3, #1
 8002820:	041b      	lsls	r3, r3, #16
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002828:	061b      	lsls	r3, r3, #24
 800282a:	491b      	ldr	r1, [pc, #108]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 800282c:	4313      	orrs	r3, r2
 800282e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002830:	4b1b      	ldr	r3, [pc, #108]	; (80028a0 <HAL_RCC_OscConfig+0x478>)
 8002832:	2201      	movs	r2, #1
 8002834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002836:	f7fd ff07 	bl	8000648 <HAL_GetTick>
 800283a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800283c:	e008      	b.n	8002850 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800283e:	f7fd ff03 	bl	8000648 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e05c      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002850:	4b11      	ldr	r3, [pc, #68]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0f0      	beq.n	800283e <HAL_RCC_OscConfig+0x416>
 800285c:	e054      	b.n	8002908 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800285e:	4b10      	ldr	r3, [pc, #64]	; (80028a0 <HAL_RCC_OscConfig+0x478>)
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002864:	f7fd fef0 	bl	8000648 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800286c:	f7fd feec 	bl	8000648 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e045      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800287e:	4b06      	ldr	r3, [pc, #24]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f0      	bne.n	800286c <HAL_RCC_OscConfig+0x444>
 800288a:	e03d      	b.n	8002908 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d107      	bne.n	80028a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e038      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
 8002898:	40023800 	.word	0x40023800
 800289c:	40007000 	.word	0x40007000
 80028a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028a4:	4b1b      	ldr	r3, [pc, #108]	; (8002914 <HAL_RCC_OscConfig+0x4ec>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d028      	beq.n	8002904 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028bc:	429a      	cmp	r2, r3
 80028be:	d121      	bne.n	8002904 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d11a      	bne.n	8002904 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028d4:	4013      	ands	r3, r2
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028dc:	4293      	cmp	r3, r2
 80028de:	d111      	bne.n	8002904 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ea:	085b      	lsrs	r3, r3, #1
 80028ec:	3b01      	subs	r3, #1
 80028ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d107      	bne.n	8002904 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002900:	429a      	cmp	r2, r3
 8002902:	d001      	beq.n	8002908 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e000      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3718      	adds	r7, #24
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40023800 	.word	0x40023800

08002918 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d101      	bne.n	800292c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e0cc      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800292c:	4b68      	ldr	r3, [pc, #416]	; (8002ad0 <HAL_RCC_ClockConfig+0x1b8>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0307 	and.w	r3, r3, #7
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	429a      	cmp	r2, r3
 8002938:	d90c      	bls.n	8002954 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800293a:	4b65      	ldr	r3, [pc, #404]	; (8002ad0 <HAL_RCC_ClockConfig+0x1b8>)
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002942:	4b63      	ldr	r3, [pc, #396]	; (8002ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	429a      	cmp	r2, r3
 800294e:	d001      	beq.n	8002954 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e0b8      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d020      	beq.n	80029a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	2b00      	cmp	r3, #0
 800296a:	d005      	beq.n	8002978 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800296c:	4b59      	ldr	r3, [pc, #356]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	4a58      	ldr	r2, [pc, #352]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8002972:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002976:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0308 	and.w	r3, r3, #8
 8002980:	2b00      	cmp	r3, #0
 8002982:	d005      	beq.n	8002990 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002984:	4b53      	ldr	r3, [pc, #332]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	4a52      	ldr	r2, [pc, #328]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 800298a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800298e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002990:	4b50      	ldr	r3, [pc, #320]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	494d      	ldr	r1, [pc, #308]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d044      	beq.n	8002a38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d107      	bne.n	80029c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029b6:	4b47      	ldr	r3, [pc, #284]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d119      	bne.n	80029f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e07f      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d003      	beq.n	80029d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029d2:	2b03      	cmp	r3, #3
 80029d4:	d107      	bne.n	80029e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029d6:	4b3f      	ldr	r3, [pc, #252]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d109      	bne.n	80029f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e06f      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e6:	4b3b      	ldr	r3, [pc, #236]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e067      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029f6:	4b37      	ldr	r3, [pc, #220]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f023 0203 	bic.w	r2, r3, #3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	4934      	ldr	r1, [pc, #208]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a08:	f7fd fe1e 	bl	8000648 <HAL_GetTick>
 8002a0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a0e:	e00a      	b.n	8002a26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a10:	f7fd fe1a 	bl	8000648 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e04f      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a26:	4b2b      	ldr	r3, [pc, #172]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f003 020c 	and.w	r2, r3, #12
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d1eb      	bne.n	8002a10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a38:	4b25      	ldr	r3, [pc, #148]	; (8002ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0307 	and.w	r3, r3, #7
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d20c      	bcs.n	8002a60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a46:	4b22      	ldr	r3, [pc, #136]	; (8002ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	b2d2      	uxtb	r2, r2
 8002a4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a4e:	4b20      	ldr	r3, [pc, #128]	; (8002ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d001      	beq.n	8002a60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e032      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0304 	and.w	r3, r3, #4
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d008      	beq.n	8002a7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a6c:	4b19      	ldr	r3, [pc, #100]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	4916      	ldr	r1, [pc, #88]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0308 	and.w	r3, r3, #8
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d009      	beq.n	8002a9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a8a:	4b12      	ldr	r3, [pc, #72]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	490e      	ldr	r1, [pc, #56]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a9e:	f000 f821 	bl	8002ae4 <HAL_RCC_GetSysClockFreq>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	4b0b      	ldr	r3, [pc, #44]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	091b      	lsrs	r3, r3, #4
 8002aaa:	f003 030f 	and.w	r3, r3, #15
 8002aae:	490a      	ldr	r1, [pc, #40]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab0:	5ccb      	ldrb	r3, [r1, r3]
 8002ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ab6:	4a09      	ldr	r2, [pc, #36]	; (8002adc <HAL_RCC_ClockConfig+0x1c4>)
 8002ab8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002aba:	4b09      	ldr	r3, [pc, #36]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c8>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7fd fd7e 	bl	80005c0 <HAL_InitTick>

  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40023c00 	.word	0x40023c00
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	08004354 	.word	0x08004354
 8002adc:	20000008 	.word	0x20000008
 8002ae0:	20000000 	.word	0x20000000

08002ae4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ae4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ae8:	b094      	sub	sp, #80	; 0x50
 8002aea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	647b      	str	r3, [r7, #68]	; 0x44
 8002af0:	2300      	movs	r3, #0
 8002af2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002af4:	2300      	movs	r3, #0
 8002af6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002af8:	2300      	movs	r3, #0
 8002afa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002afc:	4b79      	ldr	r3, [pc, #484]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f003 030c 	and.w	r3, r3, #12
 8002b04:	2b08      	cmp	r3, #8
 8002b06:	d00d      	beq.n	8002b24 <HAL_RCC_GetSysClockFreq+0x40>
 8002b08:	2b08      	cmp	r3, #8
 8002b0a:	f200 80e1 	bhi.w	8002cd0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d002      	beq.n	8002b18 <HAL_RCC_GetSysClockFreq+0x34>
 8002b12:	2b04      	cmp	r3, #4
 8002b14:	d003      	beq.n	8002b1e <HAL_RCC_GetSysClockFreq+0x3a>
 8002b16:	e0db      	b.n	8002cd0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b18:	4b73      	ldr	r3, [pc, #460]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b1a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002b1c:	e0db      	b.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b1e:	4b73      	ldr	r3, [pc, #460]	; (8002cec <HAL_RCC_GetSysClockFreq+0x208>)
 8002b20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b22:	e0d8      	b.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b24:	4b6f      	ldr	r3, [pc, #444]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b2c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b2e:	4b6d      	ldr	r3, [pc, #436]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d063      	beq.n	8002c02 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b3a:	4b6a      	ldr	r3, [pc, #424]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	099b      	lsrs	r3, r3, #6
 8002b40:	2200      	movs	r2, #0
 8002b42:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b44:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b4c:	633b      	str	r3, [r7, #48]	; 0x30
 8002b4e:	2300      	movs	r3, #0
 8002b50:	637b      	str	r3, [r7, #52]	; 0x34
 8002b52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b56:	4622      	mov	r2, r4
 8002b58:	462b      	mov	r3, r5
 8002b5a:	f04f 0000 	mov.w	r0, #0
 8002b5e:	f04f 0100 	mov.w	r1, #0
 8002b62:	0159      	lsls	r1, r3, #5
 8002b64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b68:	0150      	lsls	r0, r2, #5
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	4621      	mov	r1, r4
 8002b70:	1a51      	subs	r1, r2, r1
 8002b72:	6139      	str	r1, [r7, #16]
 8002b74:	4629      	mov	r1, r5
 8002b76:	eb63 0301 	sbc.w	r3, r3, r1
 8002b7a:	617b      	str	r3, [r7, #20]
 8002b7c:	f04f 0200 	mov.w	r2, #0
 8002b80:	f04f 0300 	mov.w	r3, #0
 8002b84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b88:	4659      	mov	r1, fp
 8002b8a:	018b      	lsls	r3, r1, #6
 8002b8c:	4651      	mov	r1, sl
 8002b8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b92:	4651      	mov	r1, sl
 8002b94:	018a      	lsls	r2, r1, #6
 8002b96:	4651      	mov	r1, sl
 8002b98:	ebb2 0801 	subs.w	r8, r2, r1
 8002b9c:	4659      	mov	r1, fp
 8002b9e:	eb63 0901 	sbc.w	r9, r3, r1
 8002ba2:	f04f 0200 	mov.w	r2, #0
 8002ba6:	f04f 0300 	mov.w	r3, #0
 8002baa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bb6:	4690      	mov	r8, r2
 8002bb8:	4699      	mov	r9, r3
 8002bba:	4623      	mov	r3, r4
 8002bbc:	eb18 0303 	adds.w	r3, r8, r3
 8002bc0:	60bb      	str	r3, [r7, #8]
 8002bc2:	462b      	mov	r3, r5
 8002bc4:	eb49 0303 	adc.w	r3, r9, r3
 8002bc8:	60fb      	str	r3, [r7, #12]
 8002bca:	f04f 0200 	mov.w	r2, #0
 8002bce:	f04f 0300 	mov.w	r3, #0
 8002bd2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002bd6:	4629      	mov	r1, r5
 8002bd8:	024b      	lsls	r3, r1, #9
 8002bda:	4621      	mov	r1, r4
 8002bdc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002be0:	4621      	mov	r1, r4
 8002be2:	024a      	lsls	r2, r1, #9
 8002be4:	4610      	mov	r0, r2
 8002be6:	4619      	mov	r1, r3
 8002be8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bea:	2200      	movs	r2, #0
 8002bec:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bf0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bf4:	f7fd fb44 	bl	8000280 <__aeabi_uldivmod>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c00:	e058      	b.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c02:	4b38      	ldr	r3, [pc, #224]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	099b      	lsrs	r3, r3, #6
 8002c08:	2200      	movs	r2, #0
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	4611      	mov	r1, r2
 8002c0e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c12:	623b      	str	r3, [r7, #32]
 8002c14:	2300      	movs	r3, #0
 8002c16:	627b      	str	r3, [r7, #36]	; 0x24
 8002c18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c1c:	4642      	mov	r2, r8
 8002c1e:	464b      	mov	r3, r9
 8002c20:	f04f 0000 	mov.w	r0, #0
 8002c24:	f04f 0100 	mov.w	r1, #0
 8002c28:	0159      	lsls	r1, r3, #5
 8002c2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c2e:	0150      	lsls	r0, r2, #5
 8002c30:	4602      	mov	r2, r0
 8002c32:	460b      	mov	r3, r1
 8002c34:	4641      	mov	r1, r8
 8002c36:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c3a:	4649      	mov	r1, r9
 8002c3c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c40:	f04f 0200 	mov.w	r2, #0
 8002c44:	f04f 0300 	mov.w	r3, #0
 8002c48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c54:	ebb2 040a 	subs.w	r4, r2, sl
 8002c58:	eb63 050b 	sbc.w	r5, r3, fp
 8002c5c:	f04f 0200 	mov.w	r2, #0
 8002c60:	f04f 0300 	mov.w	r3, #0
 8002c64:	00eb      	lsls	r3, r5, #3
 8002c66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c6a:	00e2      	lsls	r2, r4, #3
 8002c6c:	4614      	mov	r4, r2
 8002c6e:	461d      	mov	r5, r3
 8002c70:	4643      	mov	r3, r8
 8002c72:	18e3      	adds	r3, r4, r3
 8002c74:	603b      	str	r3, [r7, #0]
 8002c76:	464b      	mov	r3, r9
 8002c78:	eb45 0303 	adc.w	r3, r5, r3
 8002c7c:	607b      	str	r3, [r7, #4]
 8002c7e:	f04f 0200 	mov.w	r2, #0
 8002c82:	f04f 0300 	mov.w	r3, #0
 8002c86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c8a:	4629      	mov	r1, r5
 8002c8c:	028b      	lsls	r3, r1, #10
 8002c8e:	4621      	mov	r1, r4
 8002c90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c94:	4621      	mov	r1, r4
 8002c96:	028a      	lsls	r2, r1, #10
 8002c98:	4610      	mov	r0, r2
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	61bb      	str	r3, [r7, #24]
 8002ca2:	61fa      	str	r2, [r7, #28]
 8002ca4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ca8:	f7fd faea 	bl	8000280 <__aeabi_uldivmod>
 8002cac:	4602      	mov	r2, r0
 8002cae:	460b      	mov	r3, r1
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cb4:	4b0b      	ldr	r3, [pc, #44]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	0c1b      	lsrs	r3, r3, #16
 8002cba:	f003 0303 	and.w	r3, r3, #3
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002cc4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ccc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cce:	e002      	b.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cd0:	4b05      	ldr	r3, [pc, #20]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cd2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3750      	adds	r7, #80	; 0x50
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40023800 	.word	0x40023800
 8002ce8:	00f42400 	.word	0x00f42400
 8002cec:	007a1200 	.word	0x007a1200

08002cf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cf4:	4b03      	ldr	r3, [pc, #12]	; (8002d04 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	20000008 	.word	0x20000008

08002d08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d0c:	f7ff fff0 	bl	8002cf0 <HAL_RCC_GetHCLKFreq>
 8002d10:	4602      	mov	r2, r0
 8002d12:	4b05      	ldr	r3, [pc, #20]	; (8002d28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	0a9b      	lsrs	r3, r3, #10
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	4903      	ldr	r1, [pc, #12]	; (8002d2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d1e:	5ccb      	ldrb	r3, [r1, r3]
 8002d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	40023800 	.word	0x40023800
 8002d2c:	08004364 	.word	0x08004364

08002d30 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002d38:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002d3c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d013      	beq.n	8002d70 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002d48:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002d4c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002d50:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00b      	beq.n	8002d70 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002d58:	e000      	b.n	8002d5c <ITM_SendChar+0x2c>
    {
      __NOP();
 8002d5a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002d5c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0f9      	beq.n	8002d5a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002d66:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	b2d2      	uxtb	r2, r2
 8002d6e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002d70:	687b      	ldr	r3, [r7, #4]
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
	...

08002d80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d86:	f7fd fbf9 	bl	800057c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d8a:	f000 f82f 	bl	8002dec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d8e:	f000 f945 	bl	800301c <MX_GPIO_Init>
  MX_DMA_Init();
 8002d92:	f000 f923 	bl	8002fdc <MX_DMA_Init>
  MX_ADC1_Init();
 8002d96:	f000 f891 	bl	8002ebc <MX_ADC1_Init>
  MX_I2C1_Init();
 8002d9a:	f000 f8f1 	bl	8002f80 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, VR, 2);
 8002d9e:	2202      	movs	r2, #2
 8002da0:	490e      	ldr	r1, [pc, #56]	; (8002ddc <main+0x5c>)
 8002da2:	480f      	ldr	r0, [pc, #60]	; (8002de0 <main+0x60>)
 8002da4:	f7fd fcc4 	bl	8000730 <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("Value1: %u\n", VR[0]);
 8002da8:	4b0c      	ldr	r3, [pc, #48]	; (8002ddc <main+0x5c>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	4619      	mov	r1, r3
 8002dae:	480d      	ldr	r0, [pc, #52]	; (8002de4 <main+0x64>)
 8002db0:	f000 fc48 	bl	8003644 <iprintf>
	  HAL_I2C_Master_Transmit(&hi2c1, I2C_SLAVE_ADDRESS << 1, (uint8_t *)VR, 2, HAL_MAX_DELAY);
 8002db4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	2302      	movs	r3, #2
 8002dbc:	4a07      	ldr	r2, [pc, #28]	; (8002ddc <main+0x5c>)
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	4809      	ldr	r0, [pc, #36]	; (8002de8 <main+0x68>)
 8002dc2:	f7fe ffd7 	bl	8001d74 <HAL_I2C_Master_Transmit>
	  HAL_ADC_Start_DMA(&hadc1, VR, 2);
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	4904      	ldr	r1, [pc, #16]	; (8002ddc <main+0x5c>)
 8002dca:	4805      	ldr	r0, [pc, #20]	; (8002de0 <main+0x60>)
 8002dcc:	f7fd fcb0 	bl	8000730 <HAL_ADC_Start_DMA>
	  HAL_Delay(300);
 8002dd0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002dd4:	f7fd fc44 	bl	8000660 <HAL_Delay>
  {
 8002dd8:	e7e6      	b.n	8002da8 <main+0x28>
 8002dda:	bf00      	nop
 8002ddc:	20000184 	.word	0x20000184
 8002de0:	20000088 	.word	0x20000088
 8002de4:	08004340 	.word	0x08004340
 8002de8:	20000130 	.word	0x20000130

08002dec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b094      	sub	sp, #80	; 0x50
 8002df0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002df2:	f107 0320 	add.w	r3, r7, #32
 8002df6:	2230      	movs	r2, #48	; 0x30
 8002df8:	2100      	movs	r1, #0
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 fc34 	bl	8003668 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e00:	f107 030c 	add.w	r3, r7, #12
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	605a      	str	r2, [r3, #4]
 8002e0a:	609a      	str	r2, [r3, #8]
 8002e0c:	60da      	str	r2, [r3, #12]
 8002e0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e10:	2300      	movs	r3, #0
 8002e12:	60bb      	str	r3, [r7, #8]
 8002e14:	4b27      	ldr	r3, [pc, #156]	; (8002eb4 <SystemClock_Config+0xc8>)
 8002e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e18:	4a26      	ldr	r2, [pc, #152]	; (8002eb4 <SystemClock_Config+0xc8>)
 8002e1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e1e:	6413      	str	r3, [r2, #64]	; 0x40
 8002e20:	4b24      	ldr	r3, [pc, #144]	; (8002eb4 <SystemClock_Config+0xc8>)
 8002e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e28:	60bb      	str	r3, [r7, #8]
 8002e2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	607b      	str	r3, [r7, #4]
 8002e30:	4b21      	ldr	r3, [pc, #132]	; (8002eb8 <SystemClock_Config+0xcc>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a20      	ldr	r2, [pc, #128]	; (8002eb8 <SystemClock_Config+0xcc>)
 8002e36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e3a:	6013      	str	r3, [r2, #0]
 8002e3c:	4b1e      	ldr	r3, [pc, #120]	; (8002eb8 <SystemClock_Config+0xcc>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002e44:	607b      	str	r3, [r7, #4]
 8002e46:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e50:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e52:	2302      	movs	r3, #2
 8002e54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002e5c:	2304      	movs	r3, #4
 8002e5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002e60:	2364      	movs	r3, #100	; 0x64
 8002e62:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002e64:	2302      	movs	r3, #2
 8002e66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002e68:	2304      	movs	r3, #4
 8002e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e6c:	f107 0320 	add.w	r3, r7, #32
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7ff fad9 	bl	8002428 <HAL_RCC_OscConfig>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002e7c:	f000 f93a 	bl	80030f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e80:	230f      	movs	r3, #15
 8002e82:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e84:	2302      	movs	r3, #2
 8002e86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e92:	2300      	movs	r3, #0
 8002e94:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002e96:	f107 030c 	add.w	r3, r7, #12
 8002e9a:	2103      	movs	r1, #3
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff fd3b 	bl	8002918 <HAL_RCC_ClockConfig>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002ea8:	f000 f924 	bl	80030f4 <Error_Handler>
  }
}
 8002eac:	bf00      	nop
 8002eae:	3750      	adds	r7, #80	; 0x50
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	40007000 	.word	0x40007000

08002ebc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002ec2:	463b      	mov	r3, r7
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	605a      	str	r2, [r3, #4]
 8002eca:	609a      	str	r2, [r3, #8]
 8002ecc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002ece:	4b29      	ldr	r3, [pc, #164]	; (8002f74 <MX_ADC1_Init+0xb8>)
 8002ed0:	4a29      	ldr	r2, [pc, #164]	; (8002f78 <MX_ADC1_Init+0xbc>)
 8002ed2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002ed4:	4b27      	ldr	r3, [pc, #156]	; (8002f74 <MX_ADC1_Init+0xb8>)
 8002ed6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002eda:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8002edc:	4b25      	ldr	r3, [pc, #148]	; (8002f74 <MX_ADC1_Init+0xb8>)
 8002ede:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ee2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002ee4:	4b23      	ldr	r3, [pc, #140]	; (8002f74 <MX_ADC1_Init+0xb8>)
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002eea:	4b22      	ldr	r3, [pc, #136]	; (8002f74 <MX_ADC1_Init+0xb8>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002ef0:	4b20      	ldr	r3, [pc, #128]	; (8002f74 <MX_ADC1_Init+0xb8>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002ef8:	4b1e      	ldr	r3, [pc, #120]	; (8002f74 <MX_ADC1_Init+0xb8>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002efe:	4b1d      	ldr	r3, [pc, #116]	; (8002f74 <MX_ADC1_Init+0xb8>)
 8002f00:	4a1e      	ldr	r2, [pc, #120]	; (8002f7c <MX_ADC1_Init+0xc0>)
 8002f02:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002f04:	4b1b      	ldr	r3, [pc, #108]	; (8002f74 <MX_ADC1_Init+0xb8>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8002f0a:	4b1a      	ldr	r3, [pc, #104]	; (8002f74 <MX_ADC1_Init+0xb8>)
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002f10:	4b18      	ldr	r3, [pc, #96]	; (8002f74 <MX_ADC1_Init+0xb8>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002f18:	4b16      	ldr	r3, [pc, #88]	; (8002f74 <MX_ADC1_Init+0xb8>)
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002f1e:	4815      	ldr	r0, [pc, #84]	; (8002f74 <MX_ADC1_Init+0xb8>)
 8002f20:	f7fd fbc2 	bl	80006a8 <HAL_ADC_Init>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8002f2a:	f000 f8e3 	bl	80030f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002f32:	2301      	movs	r3, #1
 8002f34:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8002f36:	2304      	movs	r3, #4
 8002f38:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f3a:	463b      	mov	r3, r7
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	480d      	ldr	r0, [pc, #52]	; (8002f74 <MX_ADC1_Init+0xb8>)
 8002f40:	f7fd fd04 	bl	800094c <HAL_ADC_ConfigChannel>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8002f4a:	f000 f8d3 	bl	80030f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002f4e:	2302      	movs	r3, #2
 8002f50:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002f52:	2302      	movs	r3, #2
 8002f54:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f56:	463b      	mov	r3, r7
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4806      	ldr	r0, [pc, #24]	; (8002f74 <MX_ADC1_Init+0xb8>)
 8002f5c:	f7fd fcf6 	bl	800094c <HAL_ADC_ConfigChannel>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8002f66:	f000 f8c5 	bl	80030f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002f6a:	bf00      	nop
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	20000088 	.word	0x20000088
 8002f78:	40012000 	.word	0x40012000
 8002f7c:	0f000001 	.word	0x0f000001

08002f80 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002f84:	4b12      	ldr	r3, [pc, #72]	; (8002fd0 <MX_I2C1_Init+0x50>)
 8002f86:	4a13      	ldr	r2, [pc, #76]	; (8002fd4 <MX_I2C1_Init+0x54>)
 8002f88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002f8a:	4b11      	ldr	r3, [pc, #68]	; (8002fd0 <MX_I2C1_Init+0x50>)
 8002f8c:	4a12      	ldr	r2, [pc, #72]	; (8002fd8 <MX_I2C1_Init+0x58>)
 8002f8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002f90:	4b0f      	ldr	r3, [pc, #60]	; (8002fd0 <MX_I2C1_Init+0x50>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002f96:	4b0e      	ldr	r3, [pc, #56]	; (8002fd0 <MX_I2C1_Init+0x50>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f9c:	4b0c      	ldr	r3, [pc, #48]	; (8002fd0 <MX_I2C1_Init+0x50>)
 8002f9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002fa2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002fa4:	4b0a      	ldr	r3, [pc, #40]	; (8002fd0 <MX_I2C1_Init+0x50>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002faa:	4b09      	ldr	r3, [pc, #36]	; (8002fd0 <MX_I2C1_Init+0x50>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002fb0:	4b07      	ldr	r3, [pc, #28]	; (8002fd0 <MX_I2C1_Init+0x50>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002fb6:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <MX_I2C1_Init+0x50>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002fbc:	4804      	ldr	r0, [pc, #16]	; (8002fd0 <MX_I2C1_Init+0x50>)
 8002fbe:	f7fe fd95 	bl	8001aec <HAL_I2C_Init>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002fc8:	f000 f894 	bl	80030f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002fcc:	bf00      	nop
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	20000130 	.word	0x20000130
 8002fd4:	40005400 	.word	0x40005400
 8002fd8:	000186a0 	.word	0x000186a0

08002fdc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	607b      	str	r3, [r7, #4]
 8002fe6:	4b0c      	ldr	r3, [pc, #48]	; (8003018 <MX_DMA_Init+0x3c>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	4a0b      	ldr	r2, [pc, #44]	; (8003018 <MX_DMA_Init+0x3c>)
 8002fec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ff2:	4b09      	ldr	r3, [pc, #36]	; (8003018 <MX_DMA_Init+0x3c>)
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ffa:	607b      	str	r3, [r7, #4]
 8002ffc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002ffe:	2200      	movs	r2, #0
 8003000:	2100      	movs	r1, #0
 8003002:	2038      	movs	r0, #56	; 0x38
 8003004:	f7fe f82d 	bl	8001062 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003008:	2038      	movs	r0, #56	; 0x38
 800300a:	f7fe f846 	bl	800109a <HAL_NVIC_EnableIRQ>

}
 800300e:	bf00      	nop
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	40023800 	.word	0x40023800

0800301c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b088      	sub	sp, #32
 8003020:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003022:	f107 030c 	add.w	r3, r7, #12
 8003026:	2200      	movs	r2, #0
 8003028:	601a      	str	r2, [r3, #0]
 800302a:	605a      	str	r2, [r3, #4]
 800302c:	609a      	str	r2, [r3, #8]
 800302e:	60da      	str	r2, [r3, #12]
 8003030:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003032:	2300      	movs	r3, #0
 8003034:	60bb      	str	r3, [r7, #8]
 8003036:	4b1f      	ldr	r3, [pc, #124]	; (80030b4 <MX_GPIO_Init+0x98>)
 8003038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303a:	4a1e      	ldr	r2, [pc, #120]	; (80030b4 <MX_GPIO_Init+0x98>)
 800303c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003040:	6313      	str	r3, [r2, #48]	; 0x30
 8003042:	4b1c      	ldr	r3, [pc, #112]	; (80030b4 <MX_GPIO_Init+0x98>)
 8003044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800304a:	60bb      	str	r3, [r7, #8]
 800304c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800304e:	2300      	movs	r3, #0
 8003050:	607b      	str	r3, [r7, #4]
 8003052:	4b18      	ldr	r3, [pc, #96]	; (80030b4 <MX_GPIO_Init+0x98>)
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003056:	4a17      	ldr	r2, [pc, #92]	; (80030b4 <MX_GPIO_Init+0x98>)
 8003058:	f043 0301 	orr.w	r3, r3, #1
 800305c:	6313      	str	r3, [r2, #48]	; 0x30
 800305e:	4b15      	ldr	r3, [pc, #84]	; (80030b4 <MX_GPIO_Init+0x98>)
 8003060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	607b      	str	r3, [r7, #4]
 8003068:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800306a:	2300      	movs	r3, #0
 800306c:	603b      	str	r3, [r7, #0]
 800306e:	4b11      	ldr	r3, [pc, #68]	; (80030b4 <MX_GPIO_Init+0x98>)
 8003070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003072:	4a10      	ldr	r2, [pc, #64]	; (80030b4 <MX_GPIO_Init+0x98>)
 8003074:	f043 0302 	orr.w	r3, r3, #2
 8003078:	6313      	str	r3, [r2, #48]	; 0x30
 800307a:	4b0e      	ldr	r3, [pc, #56]	; (80030b4 <MX_GPIO_Init+0x98>)
 800307c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	603b      	str	r3, [r7, #0]
 8003084:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, xmin_Pin|xplus_Pin|ymin_Pin|yplus_Pin, GPIO_PIN_RESET);
 8003086:	2200      	movs	r2, #0
 8003088:	21f0      	movs	r1, #240	; 0xf0
 800308a:	480b      	ldr	r0, [pc, #44]	; (80030b8 <MX_GPIO_Init+0x9c>)
 800308c:	f7fe fd14 	bl	8001ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : xmin_Pin xplus_Pin ymin_Pin yplus_Pin */
  GPIO_InitStruct.Pin = xmin_Pin|xplus_Pin|ymin_Pin|yplus_Pin;
 8003090:	23f0      	movs	r3, #240	; 0xf0
 8003092:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003094:	2301      	movs	r3, #1
 8003096:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003098:	2300      	movs	r3, #0
 800309a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800309c:	2300      	movs	r3, #0
 800309e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030a0:	f107 030c 	add.w	r3, r7, #12
 80030a4:	4619      	mov	r1, r3
 80030a6:	4804      	ldr	r0, [pc, #16]	; (80030b8 <MX_GPIO_Init+0x9c>)
 80030a8:	f7fe fb82 	bl	80017b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80030ac:	bf00      	nop
 80030ae:	3720      	adds	r7, #32
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	40023800 	.word	0x40023800
 80030b8:	40020000 	.word	0x40020000

080030bc <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030c8:	2300      	movs	r3, #0
 80030ca:	617b      	str	r3, [r7, #20]
 80030cc:	e009      	b.n	80030e2 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	1c5a      	adds	r2, r3, #1
 80030d2:	60ba      	str	r2, [r7, #8]
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff fe2a 	bl	8002d30 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	3301      	adds	r3, #1
 80030e0:	617b      	str	r3, [r7, #20]
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	dbf1      	blt.n	80030ce <_write+0x12>
  }
  return len;
 80030ea:	687b      	ldr	r3, [r7, #4]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3718      	adds	r7, #24
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030f8:	b672      	cpsid	i
}
 80030fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030fc:	e7fe      	b.n	80030fc <Error_Handler+0x8>
	...

08003100 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003106:	2300      	movs	r3, #0
 8003108:	607b      	str	r3, [r7, #4]
 800310a:	4b10      	ldr	r3, [pc, #64]	; (800314c <HAL_MspInit+0x4c>)
 800310c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310e:	4a0f      	ldr	r2, [pc, #60]	; (800314c <HAL_MspInit+0x4c>)
 8003110:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003114:	6453      	str	r3, [r2, #68]	; 0x44
 8003116:	4b0d      	ldr	r3, [pc, #52]	; (800314c <HAL_MspInit+0x4c>)
 8003118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800311e:	607b      	str	r3, [r7, #4]
 8003120:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003122:	2300      	movs	r3, #0
 8003124:	603b      	str	r3, [r7, #0]
 8003126:	4b09      	ldr	r3, [pc, #36]	; (800314c <HAL_MspInit+0x4c>)
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	4a08      	ldr	r2, [pc, #32]	; (800314c <HAL_MspInit+0x4c>)
 800312c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003130:	6413      	str	r3, [r2, #64]	; 0x40
 8003132:	4b06      	ldr	r3, [pc, #24]	; (800314c <HAL_MspInit+0x4c>)
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800313a:	603b      	str	r3, [r7, #0]
 800313c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800313e:	2007      	movs	r0, #7
 8003140:	f7fd ff84 	bl	800104c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003144:	bf00      	nop
 8003146:	3708      	adds	r7, #8
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	40023800 	.word	0x40023800

08003150 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b08a      	sub	sp, #40	; 0x28
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003158:	f107 0314 	add.w	r3, r7, #20
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	605a      	str	r2, [r3, #4]
 8003162:	609a      	str	r2, [r3, #8]
 8003164:	60da      	str	r2, [r3, #12]
 8003166:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a2f      	ldr	r2, [pc, #188]	; (800322c <HAL_ADC_MspInit+0xdc>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d158      	bne.n	8003224 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003172:	2300      	movs	r3, #0
 8003174:	613b      	str	r3, [r7, #16]
 8003176:	4b2e      	ldr	r3, [pc, #184]	; (8003230 <HAL_ADC_MspInit+0xe0>)
 8003178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317a:	4a2d      	ldr	r2, [pc, #180]	; (8003230 <HAL_ADC_MspInit+0xe0>)
 800317c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003180:	6453      	str	r3, [r2, #68]	; 0x44
 8003182:	4b2b      	ldr	r3, [pc, #172]	; (8003230 <HAL_ADC_MspInit+0xe0>)
 8003184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318a:	613b      	str	r3, [r7, #16]
 800318c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800318e:	2300      	movs	r3, #0
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	4b27      	ldr	r3, [pc, #156]	; (8003230 <HAL_ADC_MspInit+0xe0>)
 8003194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003196:	4a26      	ldr	r2, [pc, #152]	; (8003230 <HAL_ADC_MspInit+0xe0>)
 8003198:	f043 0301 	orr.w	r3, r3, #1
 800319c:	6313      	str	r3, [r2, #48]	; 0x30
 800319e:	4b24      	ldr	r3, [pc, #144]	; (8003230 <HAL_ADC_MspInit+0xe0>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80031aa:	2306      	movs	r3, #6
 80031ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031ae:	2303      	movs	r3, #3
 80031b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b2:	2300      	movs	r3, #0
 80031b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031b6:	f107 0314 	add.w	r3, r7, #20
 80031ba:	4619      	mov	r1, r3
 80031bc:	481d      	ldr	r0, [pc, #116]	; (8003234 <HAL_ADC_MspInit+0xe4>)
 80031be:	f7fe faf7 	bl	80017b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80031c2:	4b1d      	ldr	r3, [pc, #116]	; (8003238 <HAL_ADC_MspInit+0xe8>)
 80031c4:	4a1d      	ldr	r2, [pc, #116]	; (800323c <HAL_ADC_MspInit+0xec>)
 80031c6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80031c8:	4b1b      	ldr	r3, [pc, #108]	; (8003238 <HAL_ADC_MspInit+0xe8>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031ce:	4b1a      	ldr	r3, [pc, #104]	; (8003238 <HAL_ADC_MspInit+0xe8>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80031d4:	4b18      	ldr	r3, [pc, #96]	; (8003238 <HAL_ADC_MspInit+0xe8>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80031da:	4b17      	ldr	r3, [pc, #92]	; (8003238 <HAL_ADC_MspInit+0xe8>)
 80031dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031e0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80031e2:	4b15      	ldr	r3, [pc, #84]	; (8003238 <HAL_ADC_MspInit+0xe8>)
 80031e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031e8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80031ea:	4b13      	ldr	r3, [pc, #76]	; (8003238 <HAL_ADC_MspInit+0xe8>)
 80031ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031f0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80031f2:	4b11      	ldr	r3, [pc, #68]	; (8003238 <HAL_ADC_MspInit+0xe8>)
 80031f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031f8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80031fa:	4b0f      	ldr	r3, [pc, #60]	; (8003238 <HAL_ADC_MspInit+0xe8>)
 80031fc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003200:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003202:	4b0d      	ldr	r3, [pc, #52]	; (8003238 <HAL_ADC_MspInit+0xe8>)
 8003204:	2200      	movs	r2, #0
 8003206:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003208:	480b      	ldr	r0, [pc, #44]	; (8003238 <HAL_ADC_MspInit+0xe8>)
 800320a:	f7fd ff61 	bl	80010d0 <HAL_DMA_Init>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8003214:	f7ff ff6e 	bl	80030f4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a07      	ldr	r2, [pc, #28]	; (8003238 <HAL_ADC_MspInit+0xe8>)
 800321c:	639a      	str	r2, [r3, #56]	; 0x38
 800321e:	4a06      	ldr	r2, [pc, #24]	; (8003238 <HAL_ADC_MspInit+0xe8>)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003224:	bf00      	nop
 8003226:	3728      	adds	r7, #40	; 0x28
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	40012000 	.word	0x40012000
 8003230:	40023800 	.word	0x40023800
 8003234:	40020000 	.word	0x40020000
 8003238:	200000d0 	.word	0x200000d0
 800323c:	40026410 	.word	0x40026410

08003240 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b08a      	sub	sp, #40	; 0x28
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003248:	f107 0314 	add.w	r3, r7, #20
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	605a      	str	r2, [r3, #4]
 8003252:	609a      	str	r2, [r3, #8]
 8003254:	60da      	str	r2, [r3, #12]
 8003256:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a19      	ldr	r2, [pc, #100]	; (80032c4 <HAL_I2C_MspInit+0x84>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d12b      	bne.n	80032ba <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003262:	2300      	movs	r3, #0
 8003264:	613b      	str	r3, [r7, #16]
 8003266:	4b18      	ldr	r3, [pc, #96]	; (80032c8 <HAL_I2C_MspInit+0x88>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	4a17      	ldr	r2, [pc, #92]	; (80032c8 <HAL_I2C_MspInit+0x88>)
 800326c:	f043 0302 	orr.w	r3, r3, #2
 8003270:	6313      	str	r3, [r2, #48]	; 0x30
 8003272:	4b15      	ldr	r3, [pc, #84]	; (80032c8 <HAL_I2C_MspInit+0x88>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	613b      	str	r3, [r7, #16]
 800327c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800327e:	23c0      	movs	r3, #192	; 0xc0
 8003280:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003282:	2312      	movs	r3, #18
 8003284:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003286:	2300      	movs	r3, #0
 8003288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800328a:	2303      	movs	r3, #3
 800328c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800328e:	2304      	movs	r3, #4
 8003290:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003292:	f107 0314 	add.w	r3, r7, #20
 8003296:	4619      	mov	r1, r3
 8003298:	480c      	ldr	r0, [pc, #48]	; (80032cc <HAL_I2C_MspInit+0x8c>)
 800329a:	f7fe fa89 	bl	80017b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800329e:	2300      	movs	r3, #0
 80032a0:	60fb      	str	r3, [r7, #12]
 80032a2:	4b09      	ldr	r3, [pc, #36]	; (80032c8 <HAL_I2C_MspInit+0x88>)
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	4a08      	ldr	r2, [pc, #32]	; (80032c8 <HAL_I2C_MspInit+0x88>)
 80032a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80032ac:	6413      	str	r3, [r2, #64]	; 0x40
 80032ae:	4b06      	ldr	r3, [pc, #24]	; (80032c8 <HAL_I2C_MspInit+0x88>)
 80032b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032b6:	60fb      	str	r3, [r7, #12]
 80032b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80032ba:	bf00      	nop
 80032bc:	3728      	adds	r7, #40	; 0x28
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	40005400 	.word	0x40005400
 80032c8:	40023800 	.word	0x40023800
 80032cc:	40020400 	.word	0x40020400

080032d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80032d4:	e7fe      	b.n	80032d4 <NMI_Handler+0x4>

080032d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032d6:	b480      	push	{r7}
 80032d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032da:	e7fe      	b.n	80032da <HardFault_Handler+0x4>

080032dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032e0:	e7fe      	b.n	80032e0 <MemManage_Handler+0x4>

080032e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032e2:	b480      	push	{r7}
 80032e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032e6:	e7fe      	b.n	80032e6 <BusFault_Handler+0x4>

080032e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032ec:	e7fe      	b.n	80032ec <UsageFault_Handler+0x4>

080032ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032ee:	b480      	push	{r7}
 80032f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032f2:	bf00      	nop
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003300:	bf00      	nop
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800330a:	b480      	push	{r7}
 800330c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800330e:	bf00      	nop
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800331c:	f7fd f980 	bl	8000620 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003320:	bf00      	nop
 8003322:	bd80      	pop	{r7, pc}

08003324 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003328:	4802      	ldr	r0, [pc, #8]	; (8003334 <DMA2_Stream0_IRQHandler+0x10>)
 800332a:	f7fd ffd7 	bl	80012dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800332e:	bf00      	nop
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	200000d0 	.word	0x200000d0

08003338 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003344:	2300      	movs	r3, #0
 8003346:	617b      	str	r3, [r7, #20]
 8003348:	e00a      	b.n	8003360 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800334a:	f3af 8000 	nop.w
 800334e:	4601      	mov	r1, r0
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	1c5a      	adds	r2, r3, #1
 8003354:	60ba      	str	r2, [r7, #8]
 8003356:	b2ca      	uxtb	r2, r1
 8003358:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	3301      	adds	r3, #1
 800335e:	617b      	str	r3, [r7, #20]
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	429a      	cmp	r2, r3
 8003366:	dbf0      	blt.n	800334a <_read+0x12>
  }

  return len;
 8003368:	687b      	ldr	r3, [r7, #4]
}
 800336a:	4618      	mov	r0, r3
 800336c:	3718      	adds	r7, #24
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003372:	b480      	push	{r7}
 8003374:	b083      	sub	sp, #12
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800337a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800337e:	4618      	mov	r0, r3
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr

0800338a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800338a:	b480      	push	{r7}
 800338c:	b083      	sub	sp, #12
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
 8003392:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800339a:	605a      	str	r2, [r3, #4]
  return 0;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr

080033aa <_isatty>:

int _isatty(int file)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b083      	sub	sp, #12
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80033b2:	2301      	movs	r3, #1
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3714      	adds	r7, #20
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
	...

080033dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033e4:	4a14      	ldr	r2, [pc, #80]	; (8003438 <_sbrk+0x5c>)
 80033e6:	4b15      	ldr	r3, [pc, #84]	; (800343c <_sbrk+0x60>)
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033f0:	4b13      	ldr	r3, [pc, #76]	; (8003440 <_sbrk+0x64>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d102      	bne.n	80033fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033f8:	4b11      	ldr	r3, [pc, #68]	; (8003440 <_sbrk+0x64>)
 80033fa:	4a12      	ldr	r2, [pc, #72]	; (8003444 <_sbrk+0x68>)
 80033fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033fe:	4b10      	ldr	r3, [pc, #64]	; (8003440 <_sbrk+0x64>)
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4413      	add	r3, r2
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	429a      	cmp	r2, r3
 800340a:	d207      	bcs.n	800341c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800340c:	f000 f934 	bl	8003678 <__errno>
 8003410:	4603      	mov	r3, r0
 8003412:	220c      	movs	r2, #12
 8003414:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003416:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800341a:	e009      	b.n	8003430 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800341c:	4b08      	ldr	r3, [pc, #32]	; (8003440 <_sbrk+0x64>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003422:	4b07      	ldr	r3, [pc, #28]	; (8003440 <_sbrk+0x64>)
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4413      	add	r3, r2
 800342a:	4a05      	ldr	r2, [pc, #20]	; (8003440 <_sbrk+0x64>)
 800342c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800342e:	68fb      	ldr	r3, [r7, #12]
}
 8003430:	4618      	mov	r0, r3
 8003432:	3718      	adds	r7, #24
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	20020000 	.word	0x20020000
 800343c:	00000400 	.word	0x00000400
 8003440:	20000188 	.word	0x20000188
 8003444:	200002d8 	.word	0x200002d8

08003448 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800344c:	4b06      	ldr	r3, [pc, #24]	; (8003468 <SystemInit+0x20>)
 800344e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003452:	4a05      	ldr	r2, [pc, #20]	; (8003468 <SystemInit+0x20>)
 8003454:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003458:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800345c:	bf00      	nop
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	e000ed00 	.word	0xe000ed00

0800346c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800346c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034a4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003470:	f7ff ffea 	bl	8003448 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003474:	480c      	ldr	r0, [pc, #48]	; (80034a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003476:	490d      	ldr	r1, [pc, #52]	; (80034ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003478:	4a0d      	ldr	r2, [pc, #52]	; (80034b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800347a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800347c:	e002      	b.n	8003484 <LoopCopyDataInit>

0800347e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800347e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003480:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003482:	3304      	adds	r3, #4

08003484 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003484:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003486:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003488:	d3f9      	bcc.n	800347e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800348a:	4a0a      	ldr	r2, [pc, #40]	; (80034b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800348c:	4c0a      	ldr	r4, [pc, #40]	; (80034b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800348e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003490:	e001      	b.n	8003496 <LoopFillZerobss>

08003492 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003492:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003494:	3204      	adds	r2, #4

08003496 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003496:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003498:	d3fb      	bcc.n	8003492 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800349a:	f000 f8f3 	bl	8003684 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800349e:	f7ff fc6f 	bl	8002d80 <main>
  bx  lr    
 80034a2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80034a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80034a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034ac:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80034b0:	080043b0 	.word	0x080043b0
  ldr r2, =_sbss
 80034b4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80034b8:	200002d8 	.word	0x200002d8

080034bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80034bc:	e7fe      	b.n	80034bc <ADC_IRQHandler>
	...

080034c0 <std>:
 80034c0:	2300      	movs	r3, #0
 80034c2:	b510      	push	{r4, lr}
 80034c4:	4604      	mov	r4, r0
 80034c6:	e9c0 3300 	strd	r3, r3, [r0]
 80034ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80034ce:	6083      	str	r3, [r0, #8]
 80034d0:	8181      	strh	r1, [r0, #12]
 80034d2:	6643      	str	r3, [r0, #100]	; 0x64
 80034d4:	81c2      	strh	r2, [r0, #14]
 80034d6:	6183      	str	r3, [r0, #24]
 80034d8:	4619      	mov	r1, r3
 80034da:	2208      	movs	r2, #8
 80034dc:	305c      	adds	r0, #92	; 0x5c
 80034de:	f000 f8c3 	bl	8003668 <memset>
 80034e2:	4b0d      	ldr	r3, [pc, #52]	; (8003518 <std+0x58>)
 80034e4:	6263      	str	r3, [r4, #36]	; 0x24
 80034e6:	4b0d      	ldr	r3, [pc, #52]	; (800351c <std+0x5c>)
 80034e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80034ea:	4b0d      	ldr	r3, [pc, #52]	; (8003520 <std+0x60>)
 80034ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80034ee:	4b0d      	ldr	r3, [pc, #52]	; (8003524 <std+0x64>)
 80034f0:	6323      	str	r3, [r4, #48]	; 0x30
 80034f2:	4b0d      	ldr	r3, [pc, #52]	; (8003528 <std+0x68>)
 80034f4:	6224      	str	r4, [r4, #32]
 80034f6:	429c      	cmp	r4, r3
 80034f8:	d006      	beq.n	8003508 <std+0x48>
 80034fa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80034fe:	4294      	cmp	r4, r2
 8003500:	d002      	beq.n	8003508 <std+0x48>
 8003502:	33d0      	adds	r3, #208	; 0xd0
 8003504:	429c      	cmp	r4, r3
 8003506:	d105      	bne.n	8003514 <std+0x54>
 8003508:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800350c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003510:	f000 b8dc 	b.w	80036cc <__retarget_lock_init_recursive>
 8003514:	bd10      	pop	{r4, pc}
 8003516:	bf00      	nop
 8003518:	08003f2d 	.word	0x08003f2d
 800351c:	08003f4f 	.word	0x08003f4f
 8003520:	08003f87 	.word	0x08003f87
 8003524:	08003fab 	.word	0x08003fab
 8003528:	2000018c 	.word	0x2000018c

0800352c <stdio_exit_handler>:
 800352c:	4a02      	ldr	r2, [pc, #8]	; (8003538 <stdio_exit_handler+0xc>)
 800352e:	4903      	ldr	r1, [pc, #12]	; (800353c <stdio_exit_handler+0x10>)
 8003530:	4803      	ldr	r0, [pc, #12]	; (8003540 <stdio_exit_handler+0x14>)
 8003532:	f000 b869 	b.w	8003608 <_fwalk_sglue>
 8003536:	bf00      	nop
 8003538:	2000000c 	.word	0x2000000c
 800353c:	08003ec5 	.word	0x08003ec5
 8003540:	20000018 	.word	0x20000018

08003544 <cleanup_stdio>:
 8003544:	6841      	ldr	r1, [r0, #4]
 8003546:	4b0c      	ldr	r3, [pc, #48]	; (8003578 <cleanup_stdio+0x34>)
 8003548:	4299      	cmp	r1, r3
 800354a:	b510      	push	{r4, lr}
 800354c:	4604      	mov	r4, r0
 800354e:	d001      	beq.n	8003554 <cleanup_stdio+0x10>
 8003550:	f000 fcb8 	bl	8003ec4 <_fflush_r>
 8003554:	68a1      	ldr	r1, [r4, #8]
 8003556:	4b09      	ldr	r3, [pc, #36]	; (800357c <cleanup_stdio+0x38>)
 8003558:	4299      	cmp	r1, r3
 800355a:	d002      	beq.n	8003562 <cleanup_stdio+0x1e>
 800355c:	4620      	mov	r0, r4
 800355e:	f000 fcb1 	bl	8003ec4 <_fflush_r>
 8003562:	68e1      	ldr	r1, [r4, #12]
 8003564:	4b06      	ldr	r3, [pc, #24]	; (8003580 <cleanup_stdio+0x3c>)
 8003566:	4299      	cmp	r1, r3
 8003568:	d004      	beq.n	8003574 <cleanup_stdio+0x30>
 800356a:	4620      	mov	r0, r4
 800356c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003570:	f000 bca8 	b.w	8003ec4 <_fflush_r>
 8003574:	bd10      	pop	{r4, pc}
 8003576:	bf00      	nop
 8003578:	2000018c 	.word	0x2000018c
 800357c:	200001f4 	.word	0x200001f4
 8003580:	2000025c 	.word	0x2000025c

08003584 <global_stdio_init.part.0>:
 8003584:	b510      	push	{r4, lr}
 8003586:	4b0b      	ldr	r3, [pc, #44]	; (80035b4 <global_stdio_init.part.0+0x30>)
 8003588:	4c0b      	ldr	r4, [pc, #44]	; (80035b8 <global_stdio_init.part.0+0x34>)
 800358a:	4a0c      	ldr	r2, [pc, #48]	; (80035bc <global_stdio_init.part.0+0x38>)
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	4620      	mov	r0, r4
 8003590:	2200      	movs	r2, #0
 8003592:	2104      	movs	r1, #4
 8003594:	f7ff ff94 	bl	80034c0 <std>
 8003598:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800359c:	2201      	movs	r2, #1
 800359e:	2109      	movs	r1, #9
 80035a0:	f7ff ff8e 	bl	80034c0 <std>
 80035a4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80035a8:	2202      	movs	r2, #2
 80035aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035ae:	2112      	movs	r1, #18
 80035b0:	f7ff bf86 	b.w	80034c0 <std>
 80035b4:	200002c4 	.word	0x200002c4
 80035b8:	2000018c 	.word	0x2000018c
 80035bc:	0800352d 	.word	0x0800352d

080035c0 <__sfp_lock_acquire>:
 80035c0:	4801      	ldr	r0, [pc, #4]	; (80035c8 <__sfp_lock_acquire+0x8>)
 80035c2:	f000 b884 	b.w	80036ce <__retarget_lock_acquire_recursive>
 80035c6:	bf00      	nop
 80035c8:	200002c9 	.word	0x200002c9

080035cc <__sfp_lock_release>:
 80035cc:	4801      	ldr	r0, [pc, #4]	; (80035d4 <__sfp_lock_release+0x8>)
 80035ce:	f000 b87f 	b.w	80036d0 <__retarget_lock_release_recursive>
 80035d2:	bf00      	nop
 80035d4:	200002c9 	.word	0x200002c9

080035d8 <__sinit>:
 80035d8:	b510      	push	{r4, lr}
 80035da:	4604      	mov	r4, r0
 80035dc:	f7ff fff0 	bl	80035c0 <__sfp_lock_acquire>
 80035e0:	6a23      	ldr	r3, [r4, #32]
 80035e2:	b11b      	cbz	r3, 80035ec <__sinit+0x14>
 80035e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035e8:	f7ff bff0 	b.w	80035cc <__sfp_lock_release>
 80035ec:	4b04      	ldr	r3, [pc, #16]	; (8003600 <__sinit+0x28>)
 80035ee:	6223      	str	r3, [r4, #32]
 80035f0:	4b04      	ldr	r3, [pc, #16]	; (8003604 <__sinit+0x2c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1f5      	bne.n	80035e4 <__sinit+0xc>
 80035f8:	f7ff ffc4 	bl	8003584 <global_stdio_init.part.0>
 80035fc:	e7f2      	b.n	80035e4 <__sinit+0xc>
 80035fe:	bf00      	nop
 8003600:	08003545 	.word	0x08003545
 8003604:	200002c4 	.word	0x200002c4

08003608 <_fwalk_sglue>:
 8003608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800360c:	4607      	mov	r7, r0
 800360e:	4688      	mov	r8, r1
 8003610:	4614      	mov	r4, r2
 8003612:	2600      	movs	r6, #0
 8003614:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003618:	f1b9 0901 	subs.w	r9, r9, #1
 800361c:	d505      	bpl.n	800362a <_fwalk_sglue+0x22>
 800361e:	6824      	ldr	r4, [r4, #0]
 8003620:	2c00      	cmp	r4, #0
 8003622:	d1f7      	bne.n	8003614 <_fwalk_sglue+0xc>
 8003624:	4630      	mov	r0, r6
 8003626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800362a:	89ab      	ldrh	r3, [r5, #12]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d907      	bls.n	8003640 <_fwalk_sglue+0x38>
 8003630:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003634:	3301      	adds	r3, #1
 8003636:	d003      	beq.n	8003640 <_fwalk_sglue+0x38>
 8003638:	4629      	mov	r1, r5
 800363a:	4638      	mov	r0, r7
 800363c:	47c0      	blx	r8
 800363e:	4306      	orrs	r6, r0
 8003640:	3568      	adds	r5, #104	; 0x68
 8003642:	e7e9      	b.n	8003618 <_fwalk_sglue+0x10>

08003644 <iprintf>:
 8003644:	b40f      	push	{r0, r1, r2, r3}
 8003646:	b507      	push	{r0, r1, r2, lr}
 8003648:	4906      	ldr	r1, [pc, #24]	; (8003664 <iprintf+0x20>)
 800364a:	ab04      	add	r3, sp, #16
 800364c:	6808      	ldr	r0, [r1, #0]
 800364e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003652:	6881      	ldr	r1, [r0, #8]
 8003654:	9301      	str	r3, [sp, #4]
 8003656:	f000 f865 	bl	8003724 <_vfiprintf_r>
 800365a:	b003      	add	sp, #12
 800365c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003660:	b004      	add	sp, #16
 8003662:	4770      	bx	lr
 8003664:	20000064 	.word	0x20000064

08003668 <memset>:
 8003668:	4402      	add	r2, r0
 800366a:	4603      	mov	r3, r0
 800366c:	4293      	cmp	r3, r2
 800366e:	d100      	bne.n	8003672 <memset+0xa>
 8003670:	4770      	bx	lr
 8003672:	f803 1b01 	strb.w	r1, [r3], #1
 8003676:	e7f9      	b.n	800366c <memset+0x4>

08003678 <__errno>:
 8003678:	4b01      	ldr	r3, [pc, #4]	; (8003680 <__errno+0x8>)
 800367a:	6818      	ldr	r0, [r3, #0]
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	20000064 	.word	0x20000064

08003684 <__libc_init_array>:
 8003684:	b570      	push	{r4, r5, r6, lr}
 8003686:	4d0d      	ldr	r5, [pc, #52]	; (80036bc <__libc_init_array+0x38>)
 8003688:	4c0d      	ldr	r4, [pc, #52]	; (80036c0 <__libc_init_array+0x3c>)
 800368a:	1b64      	subs	r4, r4, r5
 800368c:	10a4      	asrs	r4, r4, #2
 800368e:	2600      	movs	r6, #0
 8003690:	42a6      	cmp	r6, r4
 8003692:	d109      	bne.n	80036a8 <__libc_init_array+0x24>
 8003694:	4d0b      	ldr	r5, [pc, #44]	; (80036c4 <__libc_init_array+0x40>)
 8003696:	4c0c      	ldr	r4, [pc, #48]	; (80036c8 <__libc_init_array+0x44>)
 8003698:	f000 fe46 	bl	8004328 <_init>
 800369c:	1b64      	subs	r4, r4, r5
 800369e:	10a4      	asrs	r4, r4, #2
 80036a0:	2600      	movs	r6, #0
 80036a2:	42a6      	cmp	r6, r4
 80036a4:	d105      	bne.n	80036b2 <__libc_init_array+0x2e>
 80036a6:	bd70      	pop	{r4, r5, r6, pc}
 80036a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80036ac:	4798      	blx	r3
 80036ae:	3601      	adds	r6, #1
 80036b0:	e7ee      	b.n	8003690 <__libc_init_array+0xc>
 80036b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80036b6:	4798      	blx	r3
 80036b8:	3601      	adds	r6, #1
 80036ba:	e7f2      	b.n	80036a2 <__libc_init_array+0x1e>
 80036bc:	080043a8 	.word	0x080043a8
 80036c0:	080043a8 	.word	0x080043a8
 80036c4:	080043a8 	.word	0x080043a8
 80036c8:	080043ac 	.word	0x080043ac

080036cc <__retarget_lock_init_recursive>:
 80036cc:	4770      	bx	lr

080036ce <__retarget_lock_acquire_recursive>:
 80036ce:	4770      	bx	lr

080036d0 <__retarget_lock_release_recursive>:
 80036d0:	4770      	bx	lr

080036d2 <__sfputc_r>:
 80036d2:	6893      	ldr	r3, [r2, #8]
 80036d4:	3b01      	subs	r3, #1
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	b410      	push	{r4}
 80036da:	6093      	str	r3, [r2, #8]
 80036dc:	da08      	bge.n	80036f0 <__sfputc_r+0x1e>
 80036de:	6994      	ldr	r4, [r2, #24]
 80036e0:	42a3      	cmp	r3, r4
 80036e2:	db01      	blt.n	80036e8 <__sfputc_r+0x16>
 80036e4:	290a      	cmp	r1, #10
 80036e6:	d103      	bne.n	80036f0 <__sfputc_r+0x1e>
 80036e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036ec:	f000 bc61 	b.w	8003fb2 <__swbuf_r>
 80036f0:	6813      	ldr	r3, [r2, #0]
 80036f2:	1c58      	adds	r0, r3, #1
 80036f4:	6010      	str	r0, [r2, #0]
 80036f6:	7019      	strb	r1, [r3, #0]
 80036f8:	4608      	mov	r0, r1
 80036fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <__sfputs_r>:
 8003700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003702:	4606      	mov	r6, r0
 8003704:	460f      	mov	r7, r1
 8003706:	4614      	mov	r4, r2
 8003708:	18d5      	adds	r5, r2, r3
 800370a:	42ac      	cmp	r4, r5
 800370c:	d101      	bne.n	8003712 <__sfputs_r+0x12>
 800370e:	2000      	movs	r0, #0
 8003710:	e007      	b.n	8003722 <__sfputs_r+0x22>
 8003712:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003716:	463a      	mov	r2, r7
 8003718:	4630      	mov	r0, r6
 800371a:	f7ff ffda 	bl	80036d2 <__sfputc_r>
 800371e:	1c43      	adds	r3, r0, #1
 8003720:	d1f3      	bne.n	800370a <__sfputs_r+0xa>
 8003722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003724 <_vfiprintf_r>:
 8003724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003728:	460d      	mov	r5, r1
 800372a:	b09d      	sub	sp, #116	; 0x74
 800372c:	4614      	mov	r4, r2
 800372e:	4698      	mov	r8, r3
 8003730:	4606      	mov	r6, r0
 8003732:	b118      	cbz	r0, 800373c <_vfiprintf_r+0x18>
 8003734:	6a03      	ldr	r3, [r0, #32]
 8003736:	b90b      	cbnz	r3, 800373c <_vfiprintf_r+0x18>
 8003738:	f7ff ff4e 	bl	80035d8 <__sinit>
 800373c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800373e:	07d9      	lsls	r1, r3, #31
 8003740:	d405      	bmi.n	800374e <_vfiprintf_r+0x2a>
 8003742:	89ab      	ldrh	r3, [r5, #12]
 8003744:	059a      	lsls	r2, r3, #22
 8003746:	d402      	bmi.n	800374e <_vfiprintf_r+0x2a>
 8003748:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800374a:	f7ff ffc0 	bl	80036ce <__retarget_lock_acquire_recursive>
 800374e:	89ab      	ldrh	r3, [r5, #12]
 8003750:	071b      	lsls	r3, r3, #28
 8003752:	d501      	bpl.n	8003758 <_vfiprintf_r+0x34>
 8003754:	692b      	ldr	r3, [r5, #16]
 8003756:	b99b      	cbnz	r3, 8003780 <_vfiprintf_r+0x5c>
 8003758:	4629      	mov	r1, r5
 800375a:	4630      	mov	r0, r6
 800375c:	f000 fc66 	bl	800402c <__swsetup_r>
 8003760:	b170      	cbz	r0, 8003780 <_vfiprintf_r+0x5c>
 8003762:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003764:	07dc      	lsls	r4, r3, #31
 8003766:	d504      	bpl.n	8003772 <_vfiprintf_r+0x4e>
 8003768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800376c:	b01d      	add	sp, #116	; 0x74
 800376e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003772:	89ab      	ldrh	r3, [r5, #12]
 8003774:	0598      	lsls	r0, r3, #22
 8003776:	d4f7      	bmi.n	8003768 <_vfiprintf_r+0x44>
 8003778:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800377a:	f7ff ffa9 	bl	80036d0 <__retarget_lock_release_recursive>
 800377e:	e7f3      	b.n	8003768 <_vfiprintf_r+0x44>
 8003780:	2300      	movs	r3, #0
 8003782:	9309      	str	r3, [sp, #36]	; 0x24
 8003784:	2320      	movs	r3, #32
 8003786:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800378a:	f8cd 800c 	str.w	r8, [sp, #12]
 800378e:	2330      	movs	r3, #48	; 0x30
 8003790:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003944 <_vfiprintf_r+0x220>
 8003794:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003798:	f04f 0901 	mov.w	r9, #1
 800379c:	4623      	mov	r3, r4
 800379e:	469a      	mov	sl, r3
 80037a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80037a4:	b10a      	cbz	r2, 80037aa <_vfiprintf_r+0x86>
 80037a6:	2a25      	cmp	r2, #37	; 0x25
 80037a8:	d1f9      	bne.n	800379e <_vfiprintf_r+0x7a>
 80037aa:	ebba 0b04 	subs.w	fp, sl, r4
 80037ae:	d00b      	beq.n	80037c8 <_vfiprintf_r+0xa4>
 80037b0:	465b      	mov	r3, fp
 80037b2:	4622      	mov	r2, r4
 80037b4:	4629      	mov	r1, r5
 80037b6:	4630      	mov	r0, r6
 80037b8:	f7ff ffa2 	bl	8003700 <__sfputs_r>
 80037bc:	3001      	adds	r0, #1
 80037be:	f000 80a9 	beq.w	8003914 <_vfiprintf_r+0x1f0>
 80037c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80037c4:	445a      	add	r2, fp
 80037c6:	9209      	str	r2, [sp, #36]	; 0x24
 80037c8:	f89a 3000 	ldrb.w	r3, [sl]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f000 80a1 	beq.w	8003914 <_vfiprintf_r+0x1f0>
 80037d2:	2300      	movs	r3, #0
 80037d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80037d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80037dc:	f10a 0a01 	add.w	sl, sl, #1
 80037e0:	9304      	str	r3, [sp, #16]
 80037e2:	9307      	str	r3, [sp, #28]
 80037e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80037e8:	931a      	str	r3, [sp, #104]	; 0x68
 80037ea:	4654      	mov	r4, sl
 80037ec:	2205      	movs	r2, #5
 80037ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037f2:	4854      	ldr	r0, [pc, #336]	; (8003944 <_vfiprintf_r+0x220>)
 80037f4:	f7fc fcf4 	bl	80001e0 <memchr>
 80037f8:	9a04      	ldr	r2, [sp, #16]
 80037fa:	b9d8      	cbnz	r0, 8003834 <_vfiprintf_r+0x110>
 80037fc:	06d1      	lsls	r1, r2, #27
 80037fe:	bf44      	itt	mi
 8003800:	2320      	movmi	r3, #32
 8003802:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003806:	0713      	lsls	r3, r2, #28
 8003808:	bf44      	itt	mi
 800380a:	232b      	movmi	r3, #43	; 0x2b
 800380c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003810:	f89a 3000 	ldrb.w	r3, [sl]
 8003814:	2b2a      	cmp	r3, #42	; 0x2a
 8003816:	d015      	beq.n	8003844 <_vfiprintf_r+0x120>
 8003818:	9a07      	ldr	r2, [sp, #28]
 800381a:	4654      	mov	r4, sl
 800381c:	2000      	movs	r0, #0
 800381e:	f04f 0c0a 	mov.w	ip, #10
 8003822:	4621      	mov	r1, r4
 8003824:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003828:	3b30      	subs	r3, #48	; 0x30
 800382a:	2b09      	cmp	r3, #9
 800382c:	d94d      	bls.n	80038ca <_vfiprintf_r+0x1a6>
 800382e:	b1b0      	cbz	r0, 800385e <_vfiprintf_r+0x13a>
 8003830:	9207      	str	r2, [sp, #28]
 8003832:	e014      	b.n	800385e <_vfiprintf_r+0x13a>
 8003834:	eba0 0308 	sub.w	r3, r0, r8
 8003838:	fa09 f303 	lsl.w	r3, r9, r3
 800383c:	4313      	orrs	r3, r2
 800383e:	9304      	str	r3, [sp, #16]
 8003840:	46a2      	mov	sl, r4
 8003842:	e7d2      	b.n	80037ea <_vfiprintf_r+0xc6>
 8003844:	9b03      	ldr	r3, [sp, #12]
 8003846:	1d19      	adds	r1, r3, #4
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	9103      	str	r1, [sp, #12]
 800384c:	2b00      	cmp	r3, #0
 800384e:	bfbb      	ittet	lt
 8003850:	425b      	neglt	r3, r3
 8003852:	f042 0202 	orrlt.w	r2, r2, #2
 8003856:	9307      	strge	r3, [sp, #28]
 8003858:	9307      	strlt	r3, [sp, #28]
 800385a:	bfb8      	it	lt
 800385c:	9204      	strlt	r2, [sp, #16]
 800385e:	7823      	ldrb	r3, [r4, #0]
 8003860:	2b2e      	cmp	r3, #46	; 0x2e
 8003862:	d10c      	bne.n	800387e <_vfiprintf_r+0x15a>
 8003864:	7863      	ldrb	r3, [r4, #1]
 8003866:	2b2a      	cmp	r3, #42	; 0x2a
 8003868:	d134      	bne.n	80038d4 <_vfiprintf_r+0x1b0>
 800386a:	9b03      	ldr	r3, [sp, #12]
 800386c:	1d1a      	adds	r2, r3, #4
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	9203      	str	r2, [sp, #12]
 8003872:	2b00      	cmp	r3, #0
 8003874:	bfb8      	it	lt
 8003876:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800387a:	3402      	adds	r4, #2
 800387c:	9305      	str	r3, [sp, #20]
 800387e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003954 <_vfiprintf_r+0x230>
 8003882:	7821      	ldrb	r1, [r4, #0]
 8003884:	2203      	movs	r2, #3
 8003886:	4650      	mov	r0, sl
 8003888:	f7fc fcaa 	bl	80001e0 <memchr>
 800388c:	b138      	cbz	r0, 800389e <_vfiprintf_r+0x17a>
 800388e:	9b04      	ldr	r3, [sp, #16]
 8003890:	eba0 000a 	sub.w	r0, r0, sl
 8003894:	2240      	movs	r2, #64	; 0x40
 8003896:	4082      	lsls	r2, r0
 8003898:	4313      	orrs	r3, r2
 800389a:	3401      	adds	r4, #1
 800389c:	9304      	str	r3, [sp, #16]
 800389e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038a2:	4829      	ldr	r0, [pc, #164]	; (8003948 <_vfiprintf_r+0x224>)
 80038a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80038a8:	2206      	movs	r2, #6
 80038aa:	f7fc fc99 	bl	80001e0 <memchr>
 80038ae:	2800      	cmp	r0, #0
 80038b0:	d03f      	beq.n	8003932 <_vfiprintf_r+0x20e>
 80038b2:	4b26      	ldr	r3, [pc, #152]	; (800394c <_vfiprintf_r+0x228>)
 80038b4:	bb1b      	cbnz	r3, 80038fe <_vfiprintf_r+0x1da>
 80038b6:	9b03      	ldr	r3, [sp, #12]
 80038b8:	3307      	adds	r3, #7
 80038ba:	f023 0307 	bic.w	r3, r3, #7
 80038be:	3308      	adds	r3, #8
 80038c0:	9303      	str	r3, [sp, #12]
 80038c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038c4:	443b      	add	r3, r7
 80038c6:	9309      	str	r3, [sp, #36]	; 0x24
 80038c8:	e768      	b.n	800379c <_vfiprintf_r+0x78>
 80038ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80038ce:	460c      	mov	r4, r1
 80038d0:	2001      	movs	r0, #1
 80038d2:	e7a6      	b.n	8003822 <_vfiprintf_r+0xfe>
 80038d4:	2300      	movs	r3, #0
 80038d6:	3401      	adds	r4, #1
 80038d8:	9305      	str	r3, [sp, #20]
 80038da:	4619      	mov	r1, r3
 80038dc:	f04f 0c0a 	mov.w	ip, #10
 80038e0:	4620      	mov	r0, r4
 80038e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038e6:	3a30      	subs	r2, #48	; 0x30
 80038e8:	2a09      	cmp	r2, #9
 80038ea:	d903      	bls.n	80038f4 <_vfiprintf_r+0x1d0>
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d0c6      	beq.n	800387e <_vfiprintf_r+0x15a>
 80038f0:	9105      	str	r1, [sp, #20]
 80038f2:	e7c4      	b.n	800387e <_vfiprintf_r+0x15a>
 80038f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80038f8:	4604      	mov	r4, r0
 80038fa:	2301      	movs	r3, #1
 80038fc:	e7f0      	b.n	80038e0 <_vfiprintf_r+0x1bc>
 80038fe:	ab03      	add	r3, sp, #12
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	462a      	mov	r2, r5
 8003904:	4b12      	ldr	r3, [pc, #72]	; (8003950 <_vfiprintf_r+0x22c>)
 8003906:	a904      	add	r1, sp, #16
 8003908:	4630      	mov	r0, r6
 800390a:	f3af 8000 	nop.w
 800390e:	4607      	mov	r7, r0
 8003910:	1c78      	adds	r0, r7, #1
 8003912:	d1d6      	bne.n	80038c2 <_vfiprintf_r+0x19e>
 8003914:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003916:	07d9      	lsls	r1, r3, #31
 8003918:	d405      	bmi.n	8003926 <_vfiprintf_r+0x202>
 800391a:	89ab      	ldrh	r3, [r5, #12]
 800391c:	059a      	lsls	r2, r3, #22
 800391e:	d402      	bmi.n	8003926 <_vfiprintf_r+0x202>
 8003920:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003922:	f7ff fed5 	bl	80036d0 <__retarget_lock_release_recursive>
 8003926:	89ab      	ldrh	r3, [r5, #12]
 8003928:	065b      	lsls	r3, r3, #25
 800392a:	f53f af1d 	bmi.w	8003768 <_vfiprintf_r+0x44>
 800392e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003930:	e71c      	b.n	800376c <_vfiprintf_r+0x48>
 8003932:	ab03      	add	r3, sp, #12
 8003934:	9300      	str	r3, [sp, #0]
 8003936:	462a      	mov	r2, r5
 8003938:	4b05      	ldr	r3, [pc, #20]	; (8003950 <_vfiprintf_r+0x22c>)
 800393a:	a904      	add	r1, sp, #16
 800393c:	4630      	mov	r0, r6
 800393e:	f000 f919 	bl	8003b74 <_printf_i>
 8003942:	e7e4      	b.n	800390e <_vfiprintf_r+0x1ea>
 8003944:	0800436c 	.word	0x0800436c
 8003948:	08004376 	.word	0x08004376
 800394c:	00000000 	.word	0x00000000
 8003950:	08003701 	.word	0x08003701
 8003954:	08004372 	.word	0x08004372

08003958 <sbrk_aligned>:
 8003958:	b570      	push	{r4, r5, r6, lr}
 800395a:	4e0e      	ldr	r6, [pc, #56]	; (8003994 <sbrk_aligned+0x3c>)
 800395c:	460c      	mov	r4, r1
 800395e:	6831      	ldr	r1, [r6, #0]
 8003960:	4605      	mov	r5, r0
 8003962:	b911      	cbnz	r1, 800396a <sbrk_aligned+0x12>
 8003964:	f000 fc72 	bl	800424c <_sbrk_r>
 8003968:	6030      	str	r0, [r6, #0]
 800396a:	4621      	mov	r1, r4
 800396c:	4628      	mov	r0, r5
 800396e:	f000 fc6d 	bl	800424c <_sbrk_r>
 8003972:	1c43      	adds	r3, r0, #1
 8003974:	d00a      	beq.n	800398c <sbrk_aligned+0x34>
 8003976:	1cc4      	adds	r4, r0, #3
 8003978:	f024 0403 	bic.w	r4, r4, #3
 800397c:	42a0      	cmp	r0, r4
 800397e:	d007      	beq.n	8003990 <sbrk_aligned+0x38>
 8003980:	1a21      	subs	r1, r4, r0
 8003982:	4628      	mov	r0, r5
 8003984:	f000 fc62 	bl	800424c <_sbrk_r>
 8003988:	3001      	adds	r0, #1
 800398a:	d101      	bne.n	8003990 <sbrk_aligned+0x38>
 800398c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003990:	4620      	mov	r0, r4
 8003992:	bd70      	pop	{r4, r5, r6, pc}
 8003994:	200002d0 	.word	0x200002d0

08003998 <_malloc_r>:
 8003998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800399c:	1ccd      	adds	r5, r1, #3
 800399e:	f025 0503 	bic.w	r5, r5, #3
 80039a2:	3508      	adds	r5, #8
 80039a4:	2d0c      	cmp	r5, #12
 80039a6:	bf38      	it	cc
 80039a8:	250c      	movcc	r5, #12
 80039aa:	2d00      	cmp	r5, #0
 80039ac:	4607      	mov	r7, r0
 80039ae:	db01      	blt.n	80039b4 <_malloc_r+0x1c>
 80039b0:	42a9      	cmp	r1, r5
 80039b2:	d905      	bls.n	80039c0 <_malloc_r+0x28>
 80039b4:	230c      	movs	r3, #12
 80039b6:	603b      	str	r3, [r7, #0]
 80039b8:	2600      	movs	r6, #0
 80039ba:	4630      	mov	r0, r6
 80039bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039c0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003a94 <_malloc_r+0xfc>
 80039c4:	f000 faa6 	bl	8003f14 <__malloc_lock>
 80039c8:	f8d8 3000 	ldr.w	r3, [r8]
 80039cc:	461c      	mov	r4, r3
 80039ce:	bb5c      	cbnz	r4, 8003a28 <_malloc_r+0x90>
 80039d0:	4629      	mov	r1, r5
 80039d2:	4638      	mov	r0, r7
 80039d4:	f7ff ffc0 	bl	8003958 <sbrk_aligned>
 80039d8:	1c43      	adds	r3, r0, #1
 80039da:	4604      	mov	r4, r0
 80039dc:	d155      	bne.n	8003a8a <_malloc_r+0xf2>
 80039de:	f8d8 4000 	ldr.w	r4, [r8]
 80039e2:	4626      	mov	r6, r4
 80039e4:	2e00      	cmp	r6, #0
 80039e6:	d145      	bne.n	8003a74 <_malloc_r+0xdc>
 80039e8:	2c00      	cmp	r4, #0
 80039ea:	d048      	beq.n	8003a7e <_malloc_r+0xe6>
 80039ec:	6823      	ldr	r3, [r4, #0]
 80039ee:	4631      	mov	r1, r6
 80039f0:	4638      	mov	r0, r7
 80039f2:	eb04 0903 	add.w	r9, r4, r3
 80039f6:	f000 fc29 	bl	800424c <_sbrk_r>
 80039fa:	4581      	cmp	r9, r0
 80039fc:	d13f      	bne.n	8003a7e <_malloc_r+0xe6>
 80039fe:	6821      	ldr	r1, [r4, #0]
 8003a00:	1a6d      	subs	r5, r5, r1
 8003a02:	4629      	mov	r1, r5
 8003a04:	4638      	mov	r0, r7
 8003a06:	f7ff ffa7 	bl	8003958 <sbrk_aligned>
 8003a0a:	3001      	adds	r0, #1
 8003a0c:	d037      	beq.n	8003a7e <_malloc_r+0xe6>
 8003a0e:	6823      	ldr	r3, [r4, #0]
 8003a10:	442b      	add	r3, r5
 8003a12:	6023      	str	r3, [r4, #0]
 8003a14:	f8d8 3000 	ldr.w	r3, [r8]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d038      	beq.n	8003a8e <_malloc_r+0xf6>
 8003a1c:	685a      	ldr	r2, [r3, #4]
 8003a1e:	42a2      	cmp	r2, r4
 8003a20:	d12b      	bne.n	8003a7a <_malloc_r+0xe2>
 8003a22:	2200      	movs	r2, #0
 8003a24:	605a      	str	r2, [r3, #4]
 8003a26:	e00f      	b.n	8003a48 <_malloc_r+0xb0>
 8003a28:	6822      	ldr	r2, [r4, #0]
 8003a2a:	1b52      	subs	r2, r2, r5
 8003a2c:	d41f      	bmi.n	8003a6e <_malloc_r+0xd6>
 8003a2e:	2a0b      	cmp	r2, #11
 8003a30:	d917      	bls.n	8003a62 <_malloc_r+0xca>
 8003a32:	1961      	adds	r1, r4, r5
 8003a34:	42a3      	cmp	r3, r4
 8003a36:	6025      	str	r5, [r4, #0]
 8003a38:	bf18      	it	ne
 8003a3a:	6059      	strne	r1, [r3, #4]
 8003a3c:	6863      	ldr	r3, [r4, #4]
 8003a3e:	bf08      	it	eq
 8003a40:	f8c8 1000 	streq.w	r1, [r8]
 8003a44:	5162      	str	r2, [r4, r5]
 8003a46:	604b      	str	r3, [r1, #4]
 8003a48:	4638      	mov	r0, r7
 8003a4a:	f104 060b 	add.w	r6, r4, #11
 8003a4e:	f000 fa67 	bl	8003f20 <__malloc_unlock>
 8003a52:	f026 0607 	bic.w	r6, r6, #7
 8003a56:	1d23      	adds	r3, r4, #4
 8003a58:	1af2      	subs	r2, r6, r3
 8003a5a:	d0ae      	beq.n	80039ba <_malloc_r+0x22>
 8003a5c:	1b9b      	subs	r3, r3, r6
 8003a5e:	50a3      	str	r3, [r4, r2]
 8003a60:	e7ab      	b.n	80039ba <_malloc_r+0x22>
 8003a62:	42a3      	cmp	r3, r4
 8003a64:	6862      	ldr	r2, [r4, #4]
 8003a66:	d1dd      	bne.n	8003a24 <_malloc_r+0x8c>
 8003a68:	f8c8 2000 	str.w	r2, [r8]
 8003a6c:	e7ec      	b.n	8003a48 <_malloc_r+0xb0>
 8003a6e:	4623      	mov	r3, r4
 8003a70:	6864      	ldr	r4, [r4, #4]
 8003a72:	e7ac      	b.n	80039ce <_malloc_r+0x36>
 8003a74:	4634      	mov	r4, r6
 8003a76:	6876      	ldr	r6, [r6, #4]
 8003a78:	e7b4      	b.n	80039e4 <_malloc_r+0x4c>
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	e7cc      	b.n	8003a18 <_malloc_r+0x80>
 8003a7e:	230c      	movs	r3, #12
 8003a80:	603b      	str	r3, [r7, #0]
 8003a82:	4638      	mov	r0, r7
 8003a84:	f000 fa4c 	bl	8003f20 <__malloc_unlock>
 8003a88:	e797      	b.n	80039ba <_malloc_r+0x22>
 8003a8a:	6025      	str	r5, [r4, #0]
 8003a8c:	e7dc      	b.n	8003a48 <_malloc_r+0xb0>
 8003a8e:	605b      	str	r3, [r3, #4]
 8003a90:	deff      	udf	#255	; 0xff
 8003a92:	bf00      	nop
 8003a94:	200002cc 	.word	0x200002cc

08003a98 <_printf_common>:
 8003a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a9c:	4616      	mov	r6, r2
 8003a9e:	4699      	mov	r9, r3
 8003aa0:	688a      	ldr	r2, [r1, #8]
 8003aa2:	690b      	ldr	r3, [r1, #16]
 8003aa4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	bfb8      	it	lt
 8003aac:	4613      	movlt	r3, r2
 8003aae:	6033      	str	r3, [r6, #0]
 8003ab0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ab4:	4607      	mov	r7, r0
 8003ab6:	460c      	mov	r4, r1
 8003ab8:	b10a      	cbz	r2, 8003abe <_printf_common+0x26>
 8003aba:	3301      	adds	r3, #1
 8003abc:	6033      	str	r3, [r6, #0]
 8003abe:	6823      	ldr	r3, [r4, #0]
 8003ac0:	0699      	lsls	r1, r3, #26
 8003ac2:	bf42      	ittt	mi
 8003ac4:	6833      	ldrmi	r3, [r6, #0]
 8003ac6:	3302      	addmi	r3, #2
 8003ac8:	6033      	strmi	r3, [r6, #0]
 8003aca:	6825      	ldr	r5, [r4, #0]
 8003acc:	f015 0506 	ands.w	r5, r5, #6
 8003ad0:	d106      	bne.n	8003ae0 <_printf_common+0x48>
 8003ad2:	f104 0a19 	add.w	sl, r4, #25
 8003ad6:	68e3      	ldr	r3, [r4, #12]
 8003ad8:	6832      	ldr	r2, [r6, #0]
 8003ada:	1a9b      	subs	r3, r3, r2
 8003adc:	42ab      	cmp	r3, r5
 8003ade:	dc26      	bgt.n	8003b2e <_printf_common+0x96>
 8003ae0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ae4:	1e13      	subs	r3, r2, #0
 8003ae6:	6822      	ldr	r2, [r4, #0]
 8003ae8:	bf18      	it	ne
 8003aea:	2301      	movne	r3, #1
 8003aec:	0692      	lsls	r2, r2, #26
 8003aee:	d42b      	bmi.n	8003b48 <_printf_common+0xb0>
 8003af0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003af4:	4649      	mov	r1, r9
 8003af6:	4638      	mov	r0, r7
 8003af8:	47c0      	blx	r8
 8003afa:	3001      	adds	r0, #1
 8003afc:	d01e      	beq.n	8003b3c <_printf_common+0xa4>
 8003afe:	6823      	ldr	r3, [r4, #0]
 8003b00:	6922      	ldr	r2, [r4, #16]
 8003b02:	f003 0306 	and.w	r3, r3, #6
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	bf02      	ittt	eq
 8003b0a:	68e5      	ldreq	r5, [r4, #12]
 8003b0c:	6833      	ldreq	r3, [r6, #0]
 8003b0e:	1aed      	subeq	r5, r5, r3
 8003b10:	68a3      	ldr	r3, [r4, #8]
 8003b12:	bf0c      	ite	eq
 8003b14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b18:	2500      	movne	r5, #0
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	bfc4      	itt	gt
 8003b1e:	1a9b      	subgt	r3, r3, r2
 8003b20:	18ed      	addgt	r5, r5, r3
 8003b22:	2600      	movs	r6, #0
 8003b24:	341a      	adds	r4, #26
 8003b26:	42b5      	cmp	r5, r6
 8003b28:	d11a      	bne.n	8003b60 <_printf_common+0xc8>
 8003b2a:	2000      	movs	r0, #0
 8003b2c:	e008      	b.n	8003b40 <_printf_common+0xa8>
 8003b2e:	2301      	movs	r3, #1
 8003b30:	4652      	mov	r2, sl
 8003b32:	4649      	mov	r1, r9
 8003b34:	4638      	mov	r0, r7
 8003b36:	47c0      	blx	r8
 8003b38:	3001      	adds	r0, #1
 8003b3a:	d103      	bne.n	8003b44 <_printf_common+0xac>
 8003b3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b44:	3501      	adds	r5, #1
 8003b46:	e7c6      	b.n	8003ad6 <_printf_common+0x3e>
 8003b48:	18e1      	adds	r1, r4, r3
 8003b4a:	1c5a      	adds	r2, r3, #1
 8003b4c:	2030      	movs	r0, #48	; 0x30
 8003b4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b52:	4422      	add	r2, r4
 8003b54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b5c:	3302      	adds	r3, #2
 8003b5e:	e7c7      	b.n	8003af0 <_printf_common+0x58>
 8003b60:	2301      	movs	r3, #1
 8003b62:	4622      	mov	r2, r4
 8003b64:	4649      	mov	r1, r9
 8003b66:	4638      	mov	r0, r7
 8003b68:	47c0      	blx	r8
 8003b6a:	3001      	adds	r0, #1
 8003b6c:	d0e6      	beq.n	8003b3c <_printf_common+0xa4>
 8003b6e:	3601      	adds	r6, #1
 8003b70:	e7d9      	b.n	8003b26 <_printf_common+0x8e>
	...

08003b74 <_printf_i>:
 8003b74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b78:	7e0f      	ldrb	r7, [r1, #24]
 8003b7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003b7c:	2f78      	cmp	r7, #120	; 0x78
 8003b7e:	4691      	mov	r9, r2
 8003b80:	4680      	mov	r8, r0
 8003b82:	460c      	mov	r4, r1
 8003b84:	469a      	mov	sl, r3
 8003b86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003b8a:	d807      	bhi.n	8003b9c <_printf_i+0x28>
 8003b8c:	2f62      	cmp	r7, #98	; 0x62
 8003b8e:	d80a      	bhi.n	8003ba6 <_printf_i+0x32>
 8003b90:	2f00      	cmp	r7, #0
 8003b92:	f000 80d4 	beq.w	8003d3e <_printf_i+0x1ca>
 8003b96:	2f58      	cmp	r7, #88	; 0x58
 8003b98:	f000 80c0 	beq.w	8003d1c <_printf_i+0x1a8>
 8003b9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ba0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ba4:	e03a      	b.n	8003c1c <_printf_i+0xa8>
 8003ba6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003baa:	2b15      	cmp	r3, #21
 8003bac:	d8f6      	bhi.n	8003b9c <_printf_i+0x28>
 8003bae:	a101      	add	r1, pc, #4	; (adr r1, 8003bb4 <_printf_i+0x40>)
 8003bb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003bb4:	08003c0d 	.word	0x08003c0d
 8003bb8:	08003c21 	.word	0x08003c21
 8003bbc:	08003b9d 	.word	0x08003b9d
 8003bc0:	08003b9d 	.word	0x08003b9d
 8003bc4:	08003b9d 	.word	0x08003b9d
 8003bc8:	08003b9d 	.word	0x08003b9d
 8003bcc:	08003c21 	.word	0x08003c21
 8003bd0:	08003b9d 	.word	0x08003b9d
 8003bd4:	08003b9d 	.word	0x08003b9d
 8003bd8:	08003b9d 	.word	0x08003b9d
 8003bdc:	08003b9d 	.word	0x08003b9d
 8003be0:	08003d25 	.word	0x08003d25
 8003be4:	08003c4d 	.word	0x08003c4d
 8003be8:	08003cdf 	.word	0x08003cdf
 8003bec:	08003b9d 	.word	0x08003b9d
 8003bf0:	08003b9d 	.word	0x08003b9d
 8003bf4:	08003d47 	.word	0x08003d47
 8003bf8:	08003b9d 	.word	0x08003b9d
 8003bfc:	08003c4d 	.word	0x08003c4d
 8003c00:	08003b9d 	.word	0x08003b9d
 8003c04:	08003b9d 	.word	0x08003b9d
 8003c08:	08003ce7 	.word	0x08003ce7
 8003c0c:	682b      	ldr	r3, [r5, #0]
 8003c0e:	1d1a      	adds	r2, r3, #4
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	602a      	str	r2, [r5, #0]
 8003c14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e09f      	b.n	8003d60 <_printf_i+0x1ec>
 8003c20:	6820      	ldr	r0, [r4, #0]
 8003c22:	682b      	ldr	r3, [r5, #0]
 8003c24:	0607      	lsls	r7, r0, #24
 8003c26:	f103 0104 	add.w	r1, r3, #4
 8003c2a:	6029      	str	r1, [r5, #0]
 8003c2c:	d501      	bpl.n	8003c32 <_printf_i+0xbe>
 8003c2e:	681e      	ldr	r6, [r3, #0]
 8003c30:	e003      	b.n	8003c3a <_printf_i+0xc6>
 8003c32:	0646      	lsls	r6, r0, #25
 8003c34:	d5fb      	bpl.n	8003c2e <_printf_i+0xba>
 8003c36:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003c3a:	2e00      	cmp	r6, #0
 8003c3c:	da03      	bge.n	8003c46 <_printf_i+0xd2>
 8003c3e:	232d      	movs	r3, #45	; 0x2d
 8003c40:	4276      	negs	r6, r6
 8003c42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c46:	485a      	ldr	r0, [pc, #360]	; (8003db0 <_printf_i+0x23c>)
 8003c48:	230a      	movs	r3, #10
 8003c4a:	e012      	b.n	8003c72 <_printf_i+0xfe>
 8003c4c:	682b      	ldr	r3, [r5, #0]
 8003c4e:	6820      	ldr	r0, [r4, #0]
 8003c50:	1d19      	adds	r1, r3, #4
 8003c52:	6029      	str	r1, [r5, #0]
 8003c54:	0605      	lsls	r5, r0, #24
 8003c56:	d501      	bpl.n	8003c5c <_printf_i+0xe8>
 8003c58:	681e      	ldr	r6, [r3, #0]
 8003c5a:	e002      	b.n	8003c62 <_printf_i+0xee>
 8003c5c:	0641      	lsls	r1, r0, #25
 8003c5e:	d5fb      	bpl.n	8003c58 <_printf_i+0xe4>
 8003c60:	881e      	ldrh	r6, [r3, #0]
 8003c62:	4853      	ldr	r0, [pc, #332]	; (8003db0 <_printf_i+0x23c>)
 8003c64:	2f6f      	cmp	r7, #111	; 0x6f
 8003c66:	bf0c      	ite	eq
 8003c68:	2308      	moveq	r3, #8
 8003c6a:	230a      	movne	r3, #10
 8003c6c:	2100      	movs	r1, #0
 8003c6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c72:	6865      	ldr	r5, [r4, #4]
 8003c74:	60a5      	str	r5, [r4, #8]
 8003c76:	2d00      	cmp	r5, #0
 8003c78:	bfa2      	ittt	ge
 8003c7a:	6821      	ldrge	r1, [r4, #0]
 8003c7c:	f021 0104 	bicge.w	r1, r1, #4
 8003c80:	6021      	strge	r1, [r4, #0]
 8003c82:	b90e      	cbnz	r6, 8003c88 <_printf_i+0x114>
 8003c84:	2d00      	cmp	r5, #0
 8003c86:	d04b      	beq.n	8003d20 <_printf_i+0x1ac>
 8003c88:	4615      	mov	r5, r2
 8003c8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8003c8e:	fb03 6711 	mls	r7, r3, r1, r6
 8003c92:	5dc7      	ldrb	r7, [r0, r7]
 8003c94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003c98:	4637      	mov	r7, r6
 8003c9a:	42bb      	cmp	r3, r7
 8003c9c:	460e      	mov	r6, r1
 8003c9e:	d9f4      	bls.n	8003c8a <_printf_i+0x116>
 8003ca0:	2b08      	cmp	r3, #8
 8003ca2:	d10b      	bne.n	8003cbc <_printf_i+0x148>
 8003ca4:	6823      	ldr	r3, [r4, #0]
 8003ca6:	07de      	lsls	r6, r3, #31
 8003ca8:	d508      	bpl.n	8003cbc <_printf_i+0x148>
 8003caa:	6923      	ldr	r3, [r4, #16]
 8003cac:	6861      	ldr	r1, [r4, #4]
 8003cae:	4299      	cmp	r1, r3
 8003cb0:	bfde      	ittt	le
 8003cb2:	2330      	movle	r3, #48	; 0x30
 8003cb4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003cb8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003cbc:	1b52      	subs	r2, r2, r5
 8003cbe:	6122      	str	r2, [r4, #16]
 8003cc0:	f8cd a000 	str.w	sl, [sp]
 8003cc4:	464b      	mov	r3, r9
 8003cc6:	aa03      	add	r2, sp, #12
 8003cc8:	4621      	mov	r1, r4
 8003cca:	4640      	mov	r0, r8
 8003ccc:	f7ff fee4 	bl	8003a98 <_printf_common>
 8003cd0:	3001      	adds	r0, #1
 8003cd2:	d14a      	bne.n	8003d6a <_printf_i+0x1f6>
 8003cd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cd8:	b004      	add	sp, #16
 8003cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cde:	6823      	ldr	r3, [r4, #0]
 8003ce0:	f043 0320 	orr.w	r3, r3, #32
 8003ce4:	6023      	str	r3, [r4, #0]
 8003ce6:	4833      	ldr	r0, [pc, #204]	; (8003db4 <_printf_i+0x240>)
 8003ce8:	2778      	movs	r7, #120	; 0x78
 8003cea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003cee:	6823      	ldr	r3, [r4, #0]
 8003cf0:	6829      	ldr	r1, [r5, #0]
 8003cf2:	061f      	lsls	r7, r3, #24
 8003cf4:	f851 6b04 	ldr.w	r6, [r1], #4
 8003cf8:	d402      	bmi.n	8003d00 <_printf_i+0x18c>
 8003cfa:	065f      	lsls	r7, r3, #25
 8003cfc:	bf48      	it	mi
 8003cfe:	b2b6      	uxthmi	r6, r6
 8003d00:	07df      	lsls	r7, r3, #31
 8003d02:	bf48      	it	mi
 8003d04:	f043 0320 	orrmi.w	r3, r3, #32
 8003d08:	6029      	str	r1, [r5, #0]
 8003d0a:	bf48      	it	mi
 8003d0c:	6023      	strmi	r3, [r4, #0]
 8003d0e:	b91e      	cbnz	r6, 8003d18 <_printf_i+0x1a4>
 8003d10:	6823      	ldr	r3, [r4, #0]
 8003d12:	f023 0320 	bic.w	r3, r3, #32
 8003d16:	6023      	str	r3, [r4, #0]
 8003d18:	2310      	movs	r3, #16
 8003d1a:	e7a7      	b.n	8003c6c <_printf_i+0xf8>
 8003d1c:	4824      	ldr	r0, [pc, #144]	; (8003db0 <_printf_i+0x23c>)
 8003d1e:	e7e4      	b.n	8003cea <_printf_i+0x176>
 8003d20:	4615      	mov	r5, r2
 8003d22:	e7bd      	b.n	8003ca0 <_printf_i+0x12c>
 8003d24:	682b      	ldr	r3, [r5, #0]
 8003d26:	6826      	ldr	r6, [r4, #0]
 8003d28:	6961      	ldr	r1, [r4, #20]
 8003d2a:	1d18      	adds	r0, r3, #4
 8003d2c:	6028      	str	r0, [r5, #0]
 8003d2e:	0635      	lsls	r5, r6, #24
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	d501      	bpl.n	8003d38 <_printf_i+0x1c4>
 8003d34:	6019      	str	r1, [r3, #0]
 8003d36:	e002      	b.n	8003d3e <_printf_i+0x1ca>
 8003d38:	0670      	lsls	r0, r6, #25
 8003d3a:	d5fb      	bpl.n	8003d34 <_printf_i+0x1c0>
 8003d3c:	8019      	strh	r1, [r3, #0]
 8003d3e:	2300      	movs	r3, #0
 8003d40:	6123      	str	r3, [r4, #16]
 8003d42:	4615      	mov	r5, r2
 8003d44:	e7bc      	b.n	8003cc0 <_printf_i+0x14c>
 8003d46:	682b      	ldr	r3, [r5, #0]
 8003d48:	1d1a      	adds	r2, r3, #4
 8003d4a:	602a      	str	r2, [r5, #0]
 8003d4c:	681d      	ldr	r5, [r3, #0]
 8003d4e:	6862      	ldr	r2, [r4, #4]
 8003d50:	2100      	movs	r1, #0
 8003d52:	4628      	mov	r0, r5
 8003d54:	f7fc fa44 	bl	80001e0 <memchr>
 8003d58:	b108      	cbz	r0, 8003d5e <_printf_i+0x1ea>
 8003d5a:	1b40      	subs	r0, r0, r5
 8003d5c:	6060      	str	r0, [r4, #4]
 8003d5e:	6863      	ldr	r3, [r4, #4]
 8003d60:	6123      	str	r3, [r4, #16]
 8003d62:	2300      	movs	r3, #0
 8003d64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d68:	e7aa      	b.n	8003cc0 <_printf_i+0x14c>
 8003d6a:	6923      	ldr	r3, [r4, #16]
 8003d6c:	462a      	mov	r2, r5
 8003d6e:	4649      	mov	r1, r9
 8003d70:	4640      	mov	r0, r8
 8003d72:	47d0      	blx	sl
 8003d74:	3001      	adds	r0, #1
 8003d76:	d0ad      	beq.n	8003cd4 <_printf_i+0x160>
 8003d78:	6823      	ldr	r3, [r4, #0]
 8003d7a:	079b      	lsls	r3, r3, #30
 8003d7c:	d413      	bmi.n	8003da6 <_printf_i+0x232>
 8003d7e:	68e0      	ldr	r0, [r4, #12]
 8003d80:	9b03      	ldr	r3, [sp, #12]
 8003d82:	4298      	cmp	r0, r3
 8003d84:	bfb8      	it	lt
 8003d86:	4618      	movlt	r0, r3
 8003d88:	e7a6      	b.n	8003cd8 <_printf_i+0x164>
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	4632      	mov	r2, r6
 8003d8e:	4649      	mov	r1, r9
 8003d90:	4640      	mov	r0, r8
 8003d92:	47d0      	blx	sl
 8003d94:	3001      	adds	r0, #1
 8003d96:	d09d      	beq.n	8003cd4 <_printf_i+0x160>
 8003d98:	3501      	adds	r5, #1
 8003d9a:	68e3      	ldr	r3, [r4, #12]
 8003d9c:	9903      	ldr	r1, [sp, #12]
 8003d9e:	1a5b      	subs	r3, r3, r1
 8003da0:	42ab      	cmp	r3, r5
 8003da2:	dcf2      	bgt.n	8003d8a <_printf_i+0x216>
 8003da4:	e7eb      	b.n	8003d7e <_printf_i+0x20a>
 8003da6:	2500      	movs	r5, #0
 8003da8:	f104 0619 	add.w	r6, r4, #25
 8003dac:	e7f5      	b.n	8003d9a <_printf_i+0x226>
 8003dae:	bf00      	nop
 8003db0:	0800437d 	.word	0x0800437d
 8003db4:	0800438e 	.word	0x0800438e

08003db8 <__sflush_r>:
 8003db8:	898a      	ldrh	r2, [r1, #12]
 8003dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dbe:	4605      	mov	r5, r0
 8003dc0:	0710      	lsls	r0, r2, #28
 8003dc2:	460c      	mov	r4, r1
 8003dc4:	d458      	bmi.n	8003e78 <__sflush_r+0xc0>
 8003dc6:	684b      	ldr	r3, [r1, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	dc05      	bgt.n	8003dd8 <__sflush_r+0x20>
 8003dcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	dc02      	bgt.n	8003dd8 <__sflush_r+0x20>
 8003dd2:	2000      	movs	r0, #0
 8003dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003dd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003dda:	2e00      	cmp	r6, #0
 8003ddc:	d0f9      	beq.n	8003dd2 <__sflush_r+0x1a>
 8003dde:	2300      	movs	r3, #0
 8003de0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003de4:	682f      	ldr	r7, [r5, #0]
 8003de6:	6a21      	ldr	r1, [r4, #32]
 8003de8:	602b      	str	r3, [r5, #0]
 8003dea:	d032      	beq.n	8003e52 <__sflush_r+0x9a>
 8003dec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003dee:	89a3      	ldrh	r3, [r4, #12]
 8003df0:	075a      	lsls	r2, r3, #29
 8003df2:	d505      	bpl.n	8003e00 <__sflush_r+0x48>
 8003df4:	6863      	ldr	r3, [r4, #4]
 8003df6:	1ac0      	subs	r0, r0, r3
 8003df8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003dfa:	b10b      	cbz	r3, 8003e00 <__sflush_r+0x48>
 8003dfc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003dfe:	1ac0      	subs	r0, r0, r3
 8003e00:	2300      	movs	r3, #0
 8003e02:	4602      	mov	r2, r0
 8003e04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e06:	6a21      	ldr	r1, [r4, #32]
 8003e08:	4628      	mov	r0, r5
 8003e0a:	47b0      	blx	r6
 8003e0c:	1c43      	adds	r3, r0, #1
 8003e0e:	89a3      	ldrh	r3, [r4, #12]
 8003e10:	d106      	bne.n	8003e20 <__sflush_r+0x68>
 8003e12:	6829      	ldr	r1, [r5, #0]
 8003e14:	291d      	cmp	r1, #29
 8003e16:	d82b      	bhi.n	8003e70 <__sflush_r+0xb8>
 8003e18:	4a29      	ldr	r2, [pc, #164]	; (8003ec0 <__sflush_r+0x108>)
 8003e1a:	410a      	asrs	r2, r1
 8003e1c:	07d6      	lsls	r6, r2, #31
 8003e1e:	d427      	bmi.n	8003e70 <__sflush_r+0xb8>
 8003e20:	2200      	movs	r2, #0
 8003e22:	6062      	str	r2, [r4, #4]
 8003e24:	04d9      	lsls	r1, r3, #19
 8003e26:	6922      	ldr	r2, [r4, #16]
 8003e28:	6022      	str	r2, [r4, #0]
 8003e2a:	d504      	bpl.n	8003e36 <__sflush_r+0x7e>
 8003e2c:	1c42      	adds	r2, r0, #1
 8003e2e:	d101      	bne.n	8003e34 <__sflush_r+0x7c>
 8003e30:	682b      	ldr	r3, [r5, #0]
 8003e32:	b903      	cbnz	r3, 8003e36 <__sflush_r+0x7e>
 8003e34:	6560      	str	r0, [r4, #84]	; 0x54
 8003e36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e38:	602f      	str	r7, [r5, #0]
 8003e3a:	2900      	cmp	r1, #0
 8003e3c:	d0c9      	beq.n	8003dd2 <__sflush_r+0x1a>
 8003e3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e42:	4299      	cmp	r1, r3
 8003e44:	d002      	beq.n	8003e4c <__sflush_r+0x94>
 8003e46:	4628      	mov	r0, r5
 8003e48:	f000 fa22 	bl	8004290 <_free_r>
 8003e4c:	2000      	movs	r0, #0
 8003e4e:	6360      	str	r0, [r4, #52]	; 0x34
 8003e50:	e7c0      	b.n	8003dd4 <__sflush_r+0x1c>
 8003e52:	2301      	movs	r3, #1
 8003e54:	4628      	mov	r0, r5
 8003e56:	47b0      	blx	r6
 8003e58:	1c41      	adds	r1, r0, #1
 8003e5a:	d1c8      	bne.n	8003dee <__sflush_r+0x36>
 8003e5c:	682b      	ldr	r3, [r5, #0]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d0c5      	beq.n	8003dee <__sflush_r+0x36>
 8003e62:	2b1d      	cmp	r3, #29
 8003e64:	d001      	beq.n	8003e6a <__sflush_r+0xb2>
 8003e66:	2b16      	cmp	r3, #22
 8003e68:	d101      	bne.n	8003e6e <__sflush_r+0xb6>
 8003e6a:	602f      	str	r7, [r5, #0]
 8003e6c:	e7b1      	b.n	8003dd2 <__sflush_r+0x1a>
 8003e6e:	89a3      	ldrh	r3, [r4, #12]
 8003e70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e74:	81a3      	strh	r3, [r4, #12]
 8003e76:	e7ad      	b.n	8003dd4 <__sflush_r+0x1c>
 8003e78:	690f      	ldr	r7, [r1, #16]
 8003e7a:	2f00      	cmp	r7, #0
 8003e7c:	d0a9      	beq.n	8003dd2 <__sflush_r+0x1a>
 8003e7e:	0793      	lsls	r3, r2, #30
 8003e80:	680e      	ldr	r6, [r1, #0]
 8003e82:	bf08      	it	eq
 8003e84:	694b      	ldreq	r3, [r1, #20]
 8003e86:	600f      	str	r7, [r1, #0]
 8003e88:	bf18      	it	ne
 8003e8a:	2300      	movne	r3, #0
 8003e8c:	eba6 0807 	sub.w	r8, r6, r7
 8003e90:	608b      	str	r3, [r1, #8]
 8003e92:	f1b8 0f00 	cmp.w	r8, #0
 8003e96:	dd9c      	ble.n	8003dd2 <__sflush_r+0x1a>
 8003e98:	6a21      	ldr	r1, [r4, #32]
 8003e9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003e9c:	4643      	mov	r3, r8
 8003e9e:	463a      	mov	r2, r7
 8003ea0:	4628      	mov	r0, r5
 8003ea2:	47b0      	blx	r6
 8003ea4:	2800      	cmp	r0, #0
 8003ea6:	dc06      	bgt.n	8003eb6 <__sflush_r+0xfe>
 8003ea8:	89a3      	ldrh	r3, [r4, #12]
 8003eaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003eae:	81a3      	strh	r3, [r4, #12]
 8003eb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003eb4:	e78e      	b.n	8003dd4 <__sflush_r+0x1c>
 8003eb6:	4407      	add	r7, r0
 8003eb8:	eba8 0800 	sub.w	r8, r8, r0
 8003ebc:	e7e9      	b.n	8003e92 <__sflush_r+0xda>
 8003ebe:	bf00      	nop
 8003ec0:	dfbffffe 	.word	0xdfbffffe

08003ec4 <_fflush_r>:
 8003ec4:	b538      	push	{r3, r4, r5, lr}
 8003ec6:	690b      	ldr	r3, [r1, #16]
 8003ec8:	4605      	mov	r5, r0
 8003eca:	460c      	mov	r4, r1
 8003ecc:	b913      	cbnz	r3, 8003ed4 <_fflush_r+0x10>
 8003ece:	2500      	movs	r5, #0
 8003ed0:	4628      	mov	r0, r5
 8003ed2:	bd38      	pop	{r3, r4, r5, pc}
 8003ed4:	b118      	cbz	r0, 8003ede <_fflush_r+0x1a>
 8003ed6:	6a03      	ldr	r3, [r0, #32]
 8003ed8:	b90b      	cbnz	r3, 8003ede <_fflush_r+0x1a>
 8003eda:	f7ff fb7d 	bl	80035d8 <__sinit>
 8003ede:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d0f3      	beq.n	8003ece <_fflush_r+0xa>
 8003ee6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003ee8:	07d0      	lsls	r0, r2, #31
 8003eea:	d404      	bmi.n	8003ef6 <_fflush_r+0x32>
 8003eec:	0599      	lsls	r1, r3, #22
 8003eee:	d402      	bmi.n	8003ef6 <_fflush_r+0x32>
 8003ef0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ef2:	f7ff fbec 	bl	80036ce <__retarget_lock_acquire_recursive>
 8003ef6:	4628      	mov	r0, r5
 8003ef8:	4621      	mov	r1, r4
 8003efa:	f7ff ff5d 	bl	8003db8 <__sflush_r>
 8003efe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f00:	07da      	lsls	r2, r3, #31
 8003f02:	4605      	mov	r5, r0
 8003f04:	d4e4      	bmi.n	8003ed0 <_fflush_r+0xc>
 8003f06:	89a3      	ldrh	r3, [r4, #12]
 8003f08:	059b      	lsls	r3, r3, #22
 8003f0a:	d4e1      	bmi.n	8003ed0 <_fflush_r+0xc>
 8003f0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f0e:	f7ff fbdf 	bl	80036d0 <__retarget_lock_release_recursive>
 8003f12:	e7dd      	b.n	8003ed0 <_fflush_r+0xc>

08003f14 <__malloc_lock>:
 8003f14:	4801      	ldr	r0, [pc, #4]	; (8003f1c <__malloc_lock+0x8>)
 8003f16:	f7ff bbda 	b.w	80036ce <__retarget_lock_acquire_recursive>
 8003f1a:	bf00      	nop
 8003f1c:	200002c8 	.word	0x200002c8

08003f20 <__malloc_unlock>:
 8003f20:	4801      	ldr	r0, [pc, #4]	; (8003f28 <__malloc_unlock+0x8>)
 8003f22:	f7ff bbd5 	b.w	80036d0 <__retarget_lock_release_recursive>
 8003f26:	bf00      	nop
 8003f28:	200002c8 	.word	0x200002c8

08003f2c <__sread>:
 8003f2c:	b510      	push	{r4, lr}
 8003f2e:	460c      	mov	r4, r1
 8003f30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f34:	f000 f978 	bl	8004228 <_read_r>
 8003f38:	2800      	cmp	r0, #0
 8003f3a:	bfab      	itete	ge
 8003f3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003f3e:	89a3      	ldrhlt	r3, [r4, #12]
 8003f40:	181b      	addge	r3, r3, r0
 8003f42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003f46:	bfac      	ite	ge
 8003f48:	6563      	strge	r3, [r4, #84]	; 0x54
 8003f4a:	81a3      	strhlt	r3, [r4, #12]
 8003f4c:	bd10      	pop	{r4, pc}

08003f4e <__swrite>:
 8003f4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f52:	461f      	mov	r7, r3
 8003f54:	898b      	ldrh	r3, [r1, #12]
 8003f56:	05db      	lsls	r3, r3, #23
 8003f58:	4605      	mov	r5, r0
 8003f5a:	460c      	mov	r4, r1
 8003f5c:	4616      	mov	r6, r2
 8003f5e:	d505      	bpl.n	8003f6c <__swrite+0x1e>
 8003f60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f64:	2302      	movs	r3, #2
 8003f66:	2200      	movs	r2, #0
 8003f68:	f000 f94c 	bl	8004204 <_lseek_r>
 8003f6c:	89a3      	ldrh	r3, [r4, #12]
 8003f6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f76:	81a3      	strh	r3, [r4, #12]
 8003f78:	4632      	mov	r2, r6
 8003f7a:	463b      	mov	r3, r7
 8003f7c:	4628      	mov	r0, r5
 8003f7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f82:	f000 b973 	b.w	800426c <_write_r>

08003f86 <__sseek>:
 8003f86:	b510      	push	{r4, lr}
 8003f88:	460c      	mov	r4, r1
 8003f8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f8e:	f000 f939 	bl	8004204 <_lseek_r>
 8003f92:	1c43      	adds	r3, r0, #1
 8003f94:	89a3      	ldrh	r3, [r4, #12]
 8003f96:	bf15      	itete	ne
 8003f98:	6560      	strne	r0, [r4, #84]	; 0x54
 8003f9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003f9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003fa2:	81a3      	strheq	r3, [r4, #12]
 8003fa4:	bf18      	it	ne
 8003fa6:	81a3      	strhne	r3, [r4, #12]
 8003fa8:	bd10      	pop	{r4, pc}

08003faa <__sclose>:
 8003faa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fae:	f000 b8f7 	b.w	80041a0 <_close_r>

08003fb2 <__swbuf_r>:
 8003fb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fb4:	460e      	mov	r6, r1
 8003fb6:	4614      	mov	r4, r2
 8003fb8:	4605      	mov	r5, r0
 8003fba:	b118      	cbz	r0, 8003fc4 <__swbuf_r+0x12>
 8003fbc:	6a03      	ldr	r3, [r0, #32]
 8003fbe:	b90b      	cbnz	r3, 8003fc4 <__swbuf_r+0x12>
 8003fc0:	f7ff fb0a 	bl	80035d8 <__sinit>
 8003fc4:	69a3      	ldr	r3, [r4, #24]
 8003fc6:	60a3      	str	r3, [r4, #8]
 8003fc8:	89a3      	ldrh	r3, [r4, #12]
 8003fca:	071a      	lsls	r2, r3, #28
 8003fcc:	d525      	bpl.n	800401a <__swbuf_r+0x68>
 8003fce:	6923      	ldr	r3, [r4, #16]
 8003fd0:	b31b      	cbz	r3, 800401a <__swbuf_r+0x68>
 8003fd2:	6823      	ldr	r3, [r4, #0]
 8003fd4:	6922      	ldr	r2, [r4, #16]
 8003fd6:	1a98      	subs	r0, r3, r2
 8003fd8:	6963      	ldr	r3, [r4, #20]
 8003fda:	b2f6      	uxtb	r6, r6
 8003fdc:	4283      	cmp	r3, r0
 8003fde:	4637      	mov	r7, r6
 8003fe0:	dc04      	bgt.n	8003fec <__swbuf_r+0x3a>
 8003fe2:	4621      	mov	r1, r4
 8003fe4:	4628      	mov	r0, r5
 8003fe6:	f7ff ff6d 	bl	8003ec4 <_fflush_r>
 8003fea:	b9e0      	cbnz	r0, 8004026 <__swbuf_r+0x74>
 8003fec:	68a3      	ldr	r3, [r4, #8]
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	60a3      	str	r3, [r4, #8]
 8003ff2:	6823      	ldr	r3, [r4, #0]
 8003ff4:	1c5a      	adds	r2, r3, #1
 8003ff6:	6022      	str	r2, [r4, #0]
 8003ff8:	701e      	strb	r6, [r3, #0]
 8003ffa:	6962      	ldr	r2, [r4, #20]
 8003ffc:	1c43      	adds	r3, r0, #1
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d004      	beq.n	800400c <__swbuf_r+0x5a>
 8004002:	89a3      	ldrh	r3, [r4, #12]
 8004004:	07db      	lsls	r3, r3, #31
 8004006:	d506      	bpl.n	8004016 <__swbuf_r+0x64>
 8004008:	2e0a      	cmp	r6, #10
 800400a:	d104      	bne.n	8004016 <__swbuf_r+0x64>
 800400c:	4621      	mov	r1, r4
 800400e:	4628      	mov	r0, r5
 8004010:	f7ff ff58 	bl	8003ec4 <_fflush_r>
 8004014:	b938      	cbnz	r0, 8004026 <__swbuf_r+0x74>
 8004016:	4638      	mov	r0, r7
 8004018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800401a:	4621      	mov	r1, r4
 800401c:	4628      	mov	r0, r5
 800401e:	f000 f805 	bl	800402c <__swsetup_r>
 8004022:	2800      	cmp	r0, #0
 8004024:	d0d5      	beq.n	8003fd2 <__swbuf_r+0x20>
 8004026:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800402a:	e7f4      	b.n	8004016 <__swbuf_r+0x64>

0800402c <__swsetup_r>:
 800402c:	b538      	push	{r3, r4, r5, lr}
 800402e:	4b2a      	ldr	r3, [pc, #168]	; (80040d8 <__swsetup_r+0xac>)
 8004030:	4605      	mov	r5, r0
 8004032:	6818      	ldr	r0, [r3, #0]
 8004034:	460c      	mov	r4, r1
 8004036:	b118      	cbz	r0, 8004040 <__swsetup_r+0x14>
 8004038:	6a03      	ldr	r3, [r0, #32]
 800403a:	b90b      	cbnz	r3, 8004040 <__swsetup_r+0x14>
 800403c:	f7ff facc 	bl	80035d8 <__sinit>
 8004040:	89a3      	ldrh	r3, [r4, #12]
 8004042:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004046:	0718      	lsls	r0, r3, #28
 8004048:	d422      	bmi.n	8004090 <__swsetup_r+0x64>
 800404a:	06d9      	lsls	r1, r3, #27
 800404c:	d407      	bmi.n	800405e <__swsetup_r+0x32>
 800404e:	2309      	movs	r3, #9
 8004050:	602b      	str	r3, [r5, #0]
 8004052:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004056:	81a3      	strh	r3, [r4, #12]
 8004058:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800405c:	e034      	b.n	80040c8 <__swsetup_r+0x9c>
 800405e:	0758      	lsls	r0, r3, #29
 8004060:	d512      	bpl.n	8004088 <__swsetup_r+0x5c>
 8004062:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004064:	b141      	cbz	r1, 8004078 <__swsetup_r+0x4c>
 8004066:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800406a:	4299      	cmp	r1, r3
 800406c:	d002      	beq.n	8004074 <__swsetup_r+0x48>
 800406e:	4628      	mov	r0, r5
 8004070:	f000 f90e 	bl	8004290 <_free_r>
 8004074:	2300      	movs	r3, #0
 8004076:	6363      	str	r3, [r4, #52]	; 0x34
 8004078:	89a3      	ldrh	r3, [r4, #12]
 800407a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800407e:	81a3      	strh	r3, [r4, #12]
 8004080:	2300      	movs	r3, #0
 8004082:	6063      	str	r3, [r4, #4]
 8004084:	6923      	ldr	r3, [r4, #16]
 8004086:	6023      	str	r3, [r4, #0]
 8004088:	89a3      	ldrh	r3, [r4, #12]
 800408a:	f043 0308 	orr.w	r3, r3, #8
 800408e:	81a3      	strh	r3, [r4, #12]
 8004090:	6923      	ldr	r3, [r4, #16]
 8004092:	b94b      	cbnz	r3, 80040a8 <__swsetup_r+0x7c>
 8004094:	89a3      	ldrh	r3, [r4, #12]
 8004096:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800409a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800409e:	d003      	beq.n	80040a8 <__swsetup_r+0x7c>
 80040a0:	4621      	mov	r1, r4
 80040a2:	4628      	mov	r0, r5
 80040a4:	f000 f840 	bl	8004128 <__smakebuf_r>
 80040a8:	89a0      	ldrh	r0, [r4, #12]
 80040aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80040ae:	f010 0301 	ands.w	r3, r0, #1
 80040b2:	d00a      	beq.n	80040ca <__swsetup_r+0x9e>
 80040b4:	2300      	movs	r3, #0
 80040b6:	60a3      	str	r3, [r4, #8]
 80040b8:	6963      	ldr	r3, [r4, #20]
 80040ba:	425b      	negs	r3, r3
 80040bc:	61a3      	str	r3, [r4, #24]
 80040be:	6923      	ldr	r3, [r4, #16]
 80040c0:	b943      	cbnz	r3, 80040d4 <__swsetup_r+0xa8>
 80040c2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80040c6:	d1c4      	bne.n	8004052 <__swsetup_r+0x26>
 80040c8:	bd38      	pop	{r3, r4, r5, pc}
 80040ca:	0781      	lsls	r1, r0, #30
 80040cc:	bf58      	it	pl
 80040ce:	6963      	ldrpl	r3, [r4, #20]
 80040d0:	60a3      	str	r3, [r4, #8]
 80040d2:	e7f4      	b.n	80040be <__swsetup_r+0x92>
 80040d4:	2000      	movs	r0, #0
 80040d6:	e7f7      	b.n	80040c8 <__swsetup_r+0x9c>
 80040d8:	20000064 	.word	0x20000064

080040dc <__swhatbuf_r>:
 80040dc:	b570      	push	{r4, r5, r6, lr}
 80040de:	460c      	mov	r4, r1
 80040e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040e4:	2900      	cmp	r1, #0
 80040e6:	b096      	sub	sp, #88	; 0x58
 80040e8:	4615      	mov	r5, r2
 80040ea:	461e      	mov	r6, r3
 80040ec:	da0d      	bge.n	800410a <__swhatbuf_r+0x2e>
 80040ee:	89a3      	ldrh	r3, [r4, #12]
 80040f0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80040f4:	f04f 0100 	mov.w	r1, #0
 80040f8:	bf0c      	ite	eq
 80040fa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80040fe:	2340      	movne	r3, #64	; 0x40
 8004100:	2000      	movs	r0, #0
 8004102:	6031      	str	r1, [r6, #0]
 8004104:	602b      	str	r3, [r5, #0]
 8004106:	b016      	add	sp, #88	; 0x58
 8004108:	bd70      	pop	{r4, r5, r6, pc}
 800410a:	466a      	mov	r2, sp
 800410c:	f000 f858 	bl	80041c0 <_fstat_r>
 8004110:	2800      	cmp	r0, #0
 8004112:	dbec      	blt.n	80040ee <__swhatbuf_r+0x12>
 8004114:	9901      	ldr	r1, [sp, #4]
 8004116:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800411a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800411e:	4259      	negs	r1, r3
 8004120:	4159      	adcs	r1, r3
 8004122:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004126:	e7eb      	b.n	8004100 <__swhatbuf_r+0x24>

08004128 <__smakebuf_r>:
 8004128:	898b      	ldrh	r3, [r1, #12]
 800412a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800412c:	079d      	lsls	r5, r3, #30
 800412e:	4606      	mov	r6, r0
 8004130:	460c      	mov	r4, r1
 8004132:	d507      	bpl.n	8004144 <__smakebuf_r+0x1c>
 8004134:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004138:	6023      	str	r3, [r4, #0]
 800413a:	6123      	str	r3, [r4, #16]
 800413c:	2301      	movs	r3, #1
 800413e:	6163      	str	r3, [r4, #20]
 8004140:	b002      	add	sp, #8
 8004142:	bd70      	pop	{r4, r5, r6, pc}
 8004144:	ab01      	add	r3, sp, #4
 8004146:	466a      	mov	r2, sp
 8004148:	f7ff ffc8 	bl	80040dc <__swhatbuf_r>
 800414c:	9900      	ldr	r1, [sp, #0]
 800414e:	4605      	mov	r5, r0
 8004150:	4630      	mov	r0, r6
 8004152:	f7ff fc21 	bl	8003998 <_malloc_r>
 8004156:	b948      	cbnz	r0, 800416c <__smakebuf_r+0x44>
 8004158:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800415c:	059a      	lsls	r2, r3, #22
 800415e:	d4ef      	bmi.n	8004140 <__smakebuf_r+0x18>
 8004160:	f023 0303 	bic.w	r3, r3, #3
 8004164:	f043 0302 	orr.w	r3, r3, #2
 8004168:	81a3      	strh	r3, [r4, #12]
 800416a:	e7e3      	b.n	8004134 <__smakebuf_r+0xc>
 800416c:	89a3      	ldrh	r3, [r4, #12]
 800416e:	6020      	str	r0, [r4, #0]
 8004170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004174:	81a3      	strh	r3, [r4, #12]
 8004176:	9b00      	ldr	r3, [sp, #0]
 8004178:	6163      	str	r3, [r4, #20]
 800417a:	9b01      	ldr	r3, [sp, #4]
 800417c:	6120      	str	r0, [r4, #16]
 800417e:	b15b      	cbz	r3, 8004198 <__smakebuf_r+0x70>
 8004180:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004184:	4630      	mov	r0, r6
 8004186:	f000 f82d 	bl	80041e4 <_isatty_r>
 800418a:	b128      	cbz	r0, 8004198 <__smakebuf_r+0x70>
 800418c:	89a3      	ldrh	r3, [r4, #12]
 800418e:	f023 0303 	bic.w	r3, r3, #3
 8004192:	f043 0301 	orr.w	r3, r3, #1
 8004196:	81a3      	strh	r3, [r4, #12]
 8004198:	89a3      	ldrh	r3, [r4, #12]
 800419a:	431d      	orrs	r5, r3
 800419c:	81a5      	strh	r5, [r4, #12]
 800419e:	e7cf      	b.n	8004140 <__smakebuf_r+0x18>

080041a0 <_close_r>:
 80041a0:	b538      	push	{r3, r4, r5, lr}
 80041a2:	4d06      	ldr	r5, [pc, #24]	; (80041bc <_close_r+0x1c>)
 80041a4:	2300      	movs	r3, #0
 80041a6:	4604      	mov	r4, r0
 80041a8:	4608      	mov	r0, r1
 80041aa:	602b      	str	r3, [r5, #0]
 80041ac:	f7ff f8e1 	bl	8003372 <_close>
 80041b0:	1c43      	adds	r3, r0, #1
 80041b2:	d102      	bne.n	80041ba <_close_r+0x1a>
 80041b4:	682b      	ldr	r3, [r5, #0]
 80041b6:	b103      	cbz	r3, 80041ba <_close_r+0x1a>
 80041b8:	6023      	str	r3, [r4, #0]
 80041ba:	bd38      	pop	{r3, r4, r5, pc}
 80041bc:	200002d4 	.word	0x200002d4

080041c0 <_fstat_r>:
 80041c0:	b538      	push	{r3, r4, r5, lr}
 80041c2:	4d07      	ldr	r5, [pc, #28]	; (80041e0 <_fstat_r+0x20>)
 80041c4:	2300      	movs	r3, #0
 80041c6:	4604      	mov	r4, r0
 80041c8:	4608      	mov	r0, r1
 80041ca:	4611      	mov	r1, r2
 80041cc:	602b      	str	r3, [r5, #0]
 80041ce:	f7ff f8dc 	bl	800338a <_fstat>
 80041d2:	1c43      	adds	r3, r0, #1
 80041d4:	d102      	bne.n	80041dc <_fstat_r+0x1c>
 80041d6:	682b      	ldr	r3, [r5, #0]
 80041d8:	b103      	cbz	r3, 80041dc <_fstat_r+0x1c>
 80041da:	6023      	str	r3, [r4, #0]
 80041dc:	bd38      	pop	{r3, r4, r5, pc}
 80041de:	bf00      	nop
 80041e0:	200002d4 	.word	0x200002d4

080041e4 <_isatty_r>:
 80041e4:	b538      	push	{r3, r4, r5, lr}
 80041e6:	4d06      	ldr	r5, [pc, #24]	; (8004200 <_isatty_r+0x1c>)
 80041e8:	2300      	movs	r3, #0
 80041ea:	4604      	mov	r4, r0
 80041ec:	4608      	mov	r0, r1
 80041ee:	602b      	str	r3, [r5, #0]
 80041f0:	f7ff f8db 	bl	80033aa <_isatty>
 80041f4:	1c43      	adds	r3, r0, #1
 80041f6:	d102      	bne.n	80041fe <_isatty_r+0x1a>
 80041f8:	682b      	ldr	r3, [r5, #0]
 80041fa:	b103      	cbz	r3, 80041fe <_isatty_r+0x1a>
 80041fc:	6023      	str	r3, [r4, #0]
 80041fe:	bd38      	pop	{r3, r4, r5, pc}
 8004200:	200002d4 	.word	0x200002d4

08004204 <_lseek_r>:
 8004204:	b538      	push	{r3, r4, r5, lr}
 8004206:	4d07      	ldr	r5, [pc, #28]	; (8004224 <_lseek_r+0x20>)
 8004208:	4604      	mov	r4, r0
 800420a:	4608      	mov	r0, r1
 800420c:	4611      	mov	r1, r2
 800420e:	2200      	movs	r2, #0
 8004210:	602a      	str	r2, [r5, #0]
 8004212:	461a      	mov	r2, r3
 8004214:	f7ff f8d4 	bl	80033c0 <_lseek>
 8004218:	1c43      	adds	r3, r0, #1
 800421a:	d102      	bne.n	8004222 <_lseek_r+0x1e>
 800421c:	682b      	ldr	r3, [r5, #0]
 800421e:	b103      	cbz	r3, 8004222 <_lseek_r+0x1e>
 8004220:	6023      	str	r3, [r4, #0]
 8004222:	bd38      	pop	{r3, r4, r5, pc}
 8004224:	200002d4 	.word	0x200002d4

08004228 <_read_r>:
 8004228:	b538      	push	{r3, r4, r5, lr}
 800422a:	4d07      	ldr	r5, [pc, #28]	; (8004248 <_read_r+0x20>)
 800422c:	4604      	mov	r4, r0
 800422e:	4608      	mov	r0, r1
 8004230:	4611      	mov	r1, r2
 8004232:	2200      	movs	r2, #0
 8004234:	602a      	str	r2, [r5, #0]
 8004236:	461a      	mov	r2, r3
 8004238:	f7ff f87e 	bl	8003338 <_read>
 800423c:	1c43      	adds	r3, r0, #1
 800423e:	d102      	bne.n	8004246 <_read_r+0x1e>
 8004240:	682b      	ldr	r3, [r5, #0]
 8004242:	b103      	cbz	r3, 8004246 <_read_r+0x1e>
 8004244:	6023      	str	r3, [r4, #0]
 8004246:	bd38      	pop	{r3, r4, r5, pc}
 8004248:	200002d4 	.word	0x200002d4

0800424c <_sbrk_r>:
 800424c:	b538      	push	{r3, r4, r5, lr}
 800424e:	4d06      	ldr	r5, [pc, #24]	; (8004268 <_sbrk_r+0x1c>)
 8004250:	2300      	movs	r3, #0
 8004252:	4604      	mov	r4, r0
 8004254:	4608      	mov	r0, r1
 8004256:	602b      	str	r3, [r5, #0]
 8004258:	f7ff f8c0 	bl	80033dc <_sbrk>
 800425c:	1c43      	adds	r3, r0, #1
 800425e:	d102      	bne.n	8004266 <_sbrk_r+0x1a>
 8004260:	682b      	ldr	r3, [r5, #0]
 8004262:	b103      	cbz	r3, 8004266 <_sbrk_r+0x1a>
 8004264:	6023      	str	r3, [r4, #0]
 8004266:	bd38      	pop	{r3, r4, r5, pc}
 8004268:	200002d4 	.word	0x200002d4

0800426c <_write_r>:
 800426c:	b538      	push	{r3, r4, r5, lr}
 800426e:	4d07      	ldr	r5, [pc, #28]	; (800428c <_write_r+0x20>)
 8004270:	4604      	mov	r4, r0
 8004272:	4608      	mov	r0, r1
 8004274:	4611      	mov	r1, r2
 8004276:	2200      	movs	r2, #0
 8004278:	602a      	str	r2, [r5, #0]
 800427a:	461a      	mov	r2, r3
 800427c:	f7fe ff1e 	bl	80030bc <_write>
 8004280:	1c43      	adds	r3, r0, #1
 8004282:	d102      	bne.n	800428a <_write_r+0x1e>
 8004284:	682b      	ldr	r3, [r5, #0]
 8004286:	b103      	cbz	r3, 800428a <_write_r+0x1e>
 8004288:	6023      	str	r3, [r4, #0]
 800428a:	bd38      	pop	{r3, r4, r5, pc}
 800428c:	200002d4 	.word	0x200002d4

08004290 <_free_r>:
 8004290:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004292:	2900      	cmp	r1, #0
 8004294:	d044      	beq.n	8004320 <_free_r+0x90>
 8004296:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800429a:	9001      	str	r0, [sp, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	f1a1 0404 	sub.w	r4, r1, #4
 80042a2:	bfb8      	it	lt
 80042a4:	18e4      	addlt	r4, r4, r3
 80042a6:	f7ff fe35 	bl	8003f14 <__malloc_lock>
 80042aa:	4a1e      	ldr	r2, [pc, #120]	; (8004324 <_free_r+0x94>)
 80042ac:	9801      	ldr	r0, [sp, #4]
 80042ae:	6813      	ldr	r3, [r2, #0]
 80042b0:	b933      	cbnz	r3, 80042c0 <_free_r+0x30>
 80042b2:	6063      	str	r3, [r4, #4]
 80042b4:	6014      	str	r4, [r2, #0]
 80042b6:	b003      	add	sp, #12
 80042b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80042bc:	f7ff be30 	b.w	8003f20 <__malloc_unlock>
 80042c0:	42a3      	cmp	r3, r4
 80042c2:	d908      	bls.n	80042d6 <_free_r+0x46>
 80042c4:	6825      	ldr	r5, [r4, #0]
 80042c6:	1961      	adds	r1, r4, r5
 80042c8:	428b      	cmp	r3, r1
 80042ca:	bf01      	itttt	eq
 80042cc:	6819      	ldreq	r1, [r3, #0]
 80042ce:	685b      	ldreq	r3, [r3, #4]
 80042d0:	1949      	addeq	r1, r1, r5
 80042d2:	6021      	streq	r1, [r4, #0]
 80042d4:	e7ed      	b.n	80042b2 <_free_r+0x22>
 80042d6:	461a      	mov	r2, r3
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	b10b      	cbz	r3, 80042e0 <_free_r+0x50>
 80042dc:	42a3      	cmp	r3, r4
 80042de:	d9fa      	bls.n	80042d6 <_free_r+0x46>
 80042e0:	6811      	ldr	r1, [r2, #0]
 80042e2:	1855      	adds	r5, r2, r1
 80042e4:	42a5      	cmp	r5, r4
 80042e6:	d10b      	bne.n	8004300 <_free_r+0x70>
 80042e8:	6824      	ldr	r4, [r4, #0]
 80042ea:	4421      	add	r1, r4
 80042ec:	1854      	adds	r4, r2, r1
 80042ee:	42a3      	cmp	r3, r4
 80042f0:	6011      	str	r1, [r2, #0]
 80042f2:	d1e0      	bne.n	80042b6 <_free_r+0x26>
 80042f4:	681c      	ldr	r4, [r3, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	6053      	str	r3, [r2, #4]
 80042fa:	440c      	add	r4, r1
 80042fc:	6014      	str	r4, [r2, #0]
 80042fe:	e7da      	b.n	80042b6 <_free_r+0x26>
 8004300:	d902      	bls.n	8004308 <_free_r+0x78>
 8004302:	230c      	movs	r3, #12
 8004304:	6003      	str	r3, [r0, #0]
 8004306:	e7d6      	b.n	80042b6 <_free_r+0x26>
 8004308:	6825      	ldr	r5, [r4, #0]
 800430a:	1961      	adds	r1, r4, r5
 800430c:	428b      	cmp	r3, r1
 800430e:	bf04      	itt	eq
 8004310:	6819      	ldreq	r1, [r3, #0]
 8004312:	685b      	ldreq	r3, [r3, #4]
 8004314:	6063      	str	r3, [r4, #4]
 8004316:	bf04      	itt	eq
 8004318:	1949      	addeq	r1, r1, r5
 800431a:	6021      	streq	r1, [r4, #0]
 800431c:	6054      	str	r4, [r2, #4]
 800431e:	e7ca      	b.n	80042b6 <_free_r+0x26>
 8004320:	b003      	add	sp, #12
 8004322:	bd30      	pop	{r4, r5, pc}
 8004324:	200002cc 	.word	0x200002cc

08004328 <_init>:
 8004328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800432a:	bf00      	nop
 800432c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800432e:	bc08      	pop	{r3}
 8004330:	469e      	mov	lr, r3
 8004332:	4770      	bx	lr

08004334 <_fini>:
 8004334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004336:	bf00      	nop
 8004338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800433a:	bc08      	pop	{r3}
 800433c:	469e      	mov	lr, r3
 800433e:	4770      	bx	lr
